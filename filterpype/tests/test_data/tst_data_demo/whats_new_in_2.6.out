_<<0:>>_
++++++++ PARAGRAPH ++++++++

Navigation_<<0:>>_
++++++++ PARAGRAPH ++++++++
    * index
    * modules |
    * next |
    * previous |
    *
    * Python v2.6.2 documentation Â»
    * Whatâs New in Python Â»_<<0:>>_
++++++++ PARAGRAPH ++++++++
Whatâs New in Python 2.6Â¶
Author:	A.M_<<1:>>_Kuchling (amk at amk.ca)
Release:	2.6.2
Date:	June 09, 2009_<<0:>>_
++++++++ PARAGRAPH ++++++++
This article explains the new features in Python 2.6, released on October 1 2008_<<1:>>_The release schedule is described in PEP 361._<<0:>>_
++++++++ PARAGRAPH ++++++++
The major theme of Python 2.6 is preparing the migration path to Python 3.0, a major redesign of the language_<<1:>>_Whenever possible, Python 2.6 incorporates new features and syntax from 3.0 while remaining compatible with existing code by not removing older features or syntax_<<2:>>_When itâs not possible to do that, Python 2.6 tries to do what it can, adding compatibility functions in a future_builtins module and a -3 switch to warn about usages that will become unsupported in 3.0._<<0:>>_
++++++++ PARAGRAPH ++++++++
Some significant new packages have been added to the standard library, such as the multiprocessing and json modules, but there arenât many new features that arenât related to Python 3.0 in some way._<<0:>>_
++++++++ PARAGRAPH ++++++++
Python 2.6 also sees a number of improvements and bugfixes throughout the source_<<1:>>_A search through the change logs finds there were 259 patches applied and 612 bugs fixed between Python 2.5 and 2.6_<<2:>>_Both figures are likely to be underestimates._<<0:>>_
++++++++ PARAGRAPH ++++++++
This article doesnât attempt to provide a complete specification of the new features, but instead provides a convenient overview_<<1:>>_For full details, you should refer to the documentation for Python 2.6_<<2:>>_If you want to understand the rationale for the design and implementation, refer to the PEP for a particular new feature_<<3:>>_Whenever possible, âWhatâs New in Pythonâ links to the bug/patch item for each change_<<4:>>_Python 3.0Â¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
The development cycle for Python versions 2.6 and 3.0 was synchronized, with the alpha and beta releases for both versions being made on the same days_<<1:>>_The development of 3.0 has influenced many features in 2.6._<<0:>>_
++++++++ PARAGRAPH ++++++++
Python 3.0 is a far-ranging redesign of Python that breaks compatibility with the 2.x series_<<1:>>_This means that existing Python code will need some conversion in order to run on Python 3.0_<<2:>>_However, not all the changes in 3.0 necessarily break compatibility_<<3:>>_In cases where new features wonât cause existing code to break, theyâve been backported to 2.6 and are described in this document in the appropriate place_<<4:>>_Some of the 3.0-derived features are:_<<0:>>_
++++++++ PARAGRAPH ++++++++
    * A __complex__() method for converting objects to a complex number_<<1:>>_    * Alternate syntax for catching exceptions: except TypeError as exc_<<2:>>_    * The addition of functools.reduce() as a synonym for the built-in reduce() function._<<0:>>_
++++++++ PARAGRAPH ++++++++
Python 3.0 adds several new built-in functions and changes the semantics of some existing built-ins_<<1:>>_Functions that are new in 3.0 such as bin() have simply been added to Python 2.6, but existing built-ins havenât been changed; instead, the future_builtins module has versions with the new 3.0 semantics_<<2:>>_Code written to be compatible with 3.0 can do from future_builtins import hex, map as necessary._<<0:>>_
++++++++ PARAGRAPH ++++++++
A new command-line switch, -3, enables warnings about features that will be removed in Python 3.0_<<1:>>_You can run code with this switch to see how much work will be necessary to port code to 3.0_<<2:>>_The value of this switch is available to Python code as the boolean variable sys.py3kwarning, and to C extension code as Py_Py3kWarningFlag._<<0:>>_
++++++++ PARAGRAPH ++++++++
See also_<<0:>>_
++++++++ PARAGRAPH ++++++++
The 3xxx series of PEPs, which contains proposals for Python 3.0_<<1:>>_PEP 3000 describes the development process for Python 3.0_<<2:>>_Start with PEP 3100 that describes the general goals for Python 3.0, and then explore the higher-numbered PEPS that propose specific features_<<3:>>_Changes to the Development ProcessÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
While 2.6 was being developed, the Python development process underwent two significant changes: we switched from SourceForgeâs issue tracker to a customized Roundup installation, and the documentation was converted from LaTeX to reStructuredText_<<1:>>_New Issue Tracker: RoundupÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
For a long time, the Python developers had been growing increasingly annoyed by SourceForgeâs bug tracker_<<1:>>_SourceForgeâs hosted solution doesnât permit much customization; for example, it wasnât possible to customize the life cycle of issues._<<0:>>_
++++++++ PARAGRAPH ++++++++
The infrastructure committee of the Python Software Foundation therefore posted a call for issue trackers, asking volunteers to set up different products and import some of the bugs and patches from SourceForge_<<1:>>_Four different trackers were examined: Jira, Launchpad, Roundup, and Trac_<<2:>>_The committee eventually settled on Jira and Roundup as the two candidates_<<3:>>_Jira is a commercial product that offers no-cost hosted instances to free-software projects; Roundup is an open-source project that requires volunteers to administer it and a server to host it._<<0:>>_
++++++++ PARAGRAPH ++++++++
After posting a call for volunteers, a new Roundup installation was set up at http://bugs.python.org_<<1:>>_One installation of Roundup can host multiple trackers, and this server now also hosts issue trackers for Jython and for the Python web site_<<2:>>_It will surely find other uses in the future_<<3:>>_Where possible, this edition of âWhatâs New in Pythonâ links to the bug/patch item for each change._<<0:>>_
++++++++ PARAGRAPH ++++++++
Hosting of the Python bug tracker is kindly provided by Upfront Systems of Stellenbosch, South Africa_<<1:>>_Martin von Loewis put a lot of effort into importing existing bugs and patches from SourceForge; his scripts for this import operation are at http://svn.python.org/view/tracker/importer/ and may be useful to other projects wishing to move from SourceForge to Roundup._<<0:>>_
++++++++ PARAGRAPH ++++++++
See also_<<0:>>_
++++++++ PARAGRAPH ++++++++
http://bugs.python.org
    The Python bug tracker_<<1:>>_http://bugs.jython.org:
    The Jython bug tracker_<<2:>>_http://roundup.sourceforge.net/
    Roundup downloads and documentation_<<3:>>_http://svn.python.org/view/tracker/importer/
    Martin von Loewisâs conversion scripts._<<0:>>_
++++++++ PARAGRAPH ++++++++
New Documentation Format: reStructuredText Using SphinxÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
The Python documentation was written using LaTeX since the project started around 1989_<<1:>>_In the 1980s and early 1990s, most documentation was printed out for later study, not viewed online_<<2:>>_LaTeX was widely used because it provided attractive printed output while remaining straightforward to write once the basic rules of the markup were learned._<<0:>>_
++++++++ PARAGRAPH ++++++++
Today LaTeX is still used for writing publications destined for printing, but the landscape for programming tools has shifted_<<1:>>_We no longer print out reams of documentation; instead, we browse through it online and HTML has become the most important format to support_<<2:>>_Unfortunately, converting LaTeX to HTML is fairly complicated and Fred L_<<3:>>_Drake Jr., the long-time Python documentation editor, spent a lot of time maintaining the conversion process_<<4:>>_Occasionally people would suggest converting the documentation into SGML and later XML, but performing a good conversion is a major task and no one ever committed the time required to finish the job._<<0:>>_
++++++++ PARAGRAPH ++++++++
During the 2.6 development cycle, Georg Brandl put a lot of effort into building a new toolchain for processing the documentation_<<1:>>_The resulting package is called Sphinx, and is available from http://sphinx.pocoo.org/._<<0:>>_
++++++++ PARAGRAPH ++++++++
Sphinx concentrates on HTML output, producing attractively styled and modern HTML; printed output is still supported through conversion to LaTeX_<<1:>>_The input format is reStructuredText, a markup syntax supporting custom extensions and directives that is commonly used in the Python community._<<0:>>_
++++++++ PARAGRAPH ++++++++
Sphinx is a standalone package that can be used for writing, and almost two dozen other projects (listed on the Sphinx web site) have adopted Sphinx as their documentation tool._<<0:>>_
++++++++ PARAGRAPH ++++++++
See also_<<0:>>_
++++++++ PARAGRAPH ++++++++
Documenting Python
    Describes how to write for Pythonâs documentation_<<1:>>_Sphinx
    Documentation and code for the Sphinx toolchain_<<2:>>_Docutils
    The underlying reStructuredText parser and toolset._<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 343: The âwithâ statementÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
The previous version, Python 2.5, added the âwithâ statement as an optional feature, to be enabled by a from __future__ import with_statement directive_<<1:>>_In 2.6 the statement no longer needs to be specially enabled; this means that with is now always a keyword_<<2:>>_The rest of this section is a copy of the corresponding section from the âWhatâ_<<0:>>_
++++++++ PARAGRAPH ++++++++
s New in Python 2.5â document; if youâre familiar with the âwithâ statement from Python 2.5, you can skip this section._<<0:>>_
++++++++ PARAGRAPH ++++++++
The âwithâ statement clarifies code that previously would use try...finally blocks to ensure that clean-up code is executed_<<1:>>_In this section, Iâll discuss the statement as it will commonly be used_<<2:>>_In the next section, Iâll examine the implementation details and show how to write objects for use with this statement._<<0:>>_
++++++++ PARAGRAPH ++++++++
The âwithâ statement is a control-flow structure whose basic structure is:_<<0:>>_
++++++++ PARAGRAPH ++++++++
with expression [as variable]:
    with-block_<<0:>>_
++++++++ PARAGRAPH ++++++++
The expression is evaluated, and it should result in an object that supports the context management protocol (that is, has __enter__() and __exit__() methods)._<<0:>>_
++++++++ PARAGRAPH ++++++++
The objectâs __enter__() is called before with-block is executed and therefore can run set-up code_<<1:>>_It also may return a value that is bound to the name variable, if given_<<2:>>_(Note carefully that variable is not assigned the result of expression.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
After execution of the with-block is finished, the objectâs __exit__() method is called, even if the block raised an exception, and can therefore run clean-up code._<<0:>>_
++++++++ PARAGRAPH ++++++++
Some standard Python objects now support the context management protocol and can be used with the âwithâ statement_<<1:>>_File objects are one example:_<<0:>>_
++++++++ PARAGRAPH ++++++++
with open('/etc/passwd', 'r') as f:
    for line in f:
        print line
        .._<<1:>>_more processing code ..._<<0:>>_
++++++++ PARAGRAPH ++++++++
After this statement has executed, the file object in f will have been automatically closed, even if the for loop raised an exception part- way through the block._<<0:>>_
++++++++ PARAGRAPH ++++++++
Note_<<0:>>_
++++++++ PARAGRAPH ++++++++
In this case, f is the same object created by open(), because file.__enter__() returns self._<<0:>>_
++++++++ PARAGRAPH ++++++++
The threading moduleâs locks and condition variables also support the âwithâ statement:_<<0:>>_
++++++++ PARAGRAPH ++++++++
lock = threading.Lock()
with lock:
    # Critical section of code
    ..._<<0:>>_
++++++++ PARAGRAPH ++++++++
The lock is acquired before the block is executed and always released once the block is complete._<<0:>>_
++++++++ PARAGRAPH ++++++++
The localcontext() function in the decimal module makes it easy to save and restore the current decimal context, which encapsulates the desired precision and rounding characteristics for computations:_<<0:>>_
++++++++ PARAGRAPH ++++++++
from decimal import Decimal, Context, localcontext_<<0:>>_
++++++++ PARAGRAPH ++++++++
# Displays with default precision of 28 digits
v = Decimal('578')
print v.sqrt()_<<0:>>_
++++++++ PARAGRAPH ++++++++
with localcontext(Context(prec=16)):
    # All code in this block uses a precision of 16 digits_<<1:>>_    # The original context is restored on exiting the block_<<2:>>_    print v.sqrt()_<<0:>>_
++++++++ PARAGRAPH ++++++++
Writing Context ManagersÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
Under the hood, the âwithâ statement is fairly complicated_<<1:>>_Most people will only use âwithâ in company with existing objects and donât need to know these details, so you can skip the rest of this section if you like_<<2:>>_Authors of new objects will need to understand the details of the underlying implementation and should keep reading._<<0:>>_
++++++++ PARAGRAPH ++++++++
A high-level explanation of the context management protocol is:_<<0:>>_
++++++++ PARAGRAPH ++++++++
    * The expression is evaluated and should result in an object called a âcontext managerâ_<<1:>>_The context manager must have __enter__() and __exit__() methods_<<2:>>_    * The context managerâs __enter__() method is called_<<3:>>_The value returned is assigned to VAR_<<4:>>_If no as VAR clause is present, the value is simply discarded_<<5:>>_    * The code in BLOCK is executed_<<6:>>_    * If BLOCK raises an exception, the __exit__(type, value, traceback)() is called with the exception details, the same values returned by sys.exc_info()_<<7:>>_The methodâs return value controls whether the exception is re-raised: any false value re-raises the exception, and True will result in suppressing it_<<8:>>_Youâll only rarely want to suppress the exception, because if you do the author of the code containing the âwithâ statement will never realize anything went wrong_<<9:>>_    * If BLOCK didnât raise an exception, the __exit__() method is still called, but type, value, and traceback are all None._<<0:>>_
++++++++ PARAGRAPH ++++++++
Letâs think through an example_<<1:>>_I wonât present detailed code but will only sketch the methods necessary for a database that supports transactions._<<0:>>_
++++++++ PARAGRAPH ++++++++
(For people unfamiliar with database terminology: a set of changes to the database are grouped into a transaction_<<1:>>_Transactions can be either committed, meaning that all the changes are written into the database, or rolled back, meaning that the changes are all discarded and the database is unchanged_<<2:>>_See any database textbook for more information.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
Letâs assume thereâs an object representing a database connection_<<1:>>_Our goal will be to let the user write code like this:_<<0:>>_
++++++++ PARAGRAPH ++++++++
db_connection = DatabaseConnection()
with db_connection as cursor:
    cursor.execute('insert into ...')
    cursor.execute('delete from ...')
    # .._<<1:>>_more operations ..._<<0:>>_
++++++++ PARAGRAPH ++++++++
The transaction should be committed if the code in the block runs flawlessly or rolled back if thereâs an exception_<<1:>>_Hereâs the basic interface for DatabaseConnection that Iâll assume:_<<0:>>_
++++++++ PARAGRAPH ++++++++
class DatabaseConnection:
    # Database interface
    def cursor(self):
        "Returns a cursor object and starts a new transaction"
    def commit(self):
        "Commits current transaction"
    def rollback(self):
        "Rolls back current transaction"_<<0:>>_
++++++++ PARAGRAPH ++++++++
The __enter__() method is pretty easy, having only to start a new transaction_<<1:>>_For this application the resulting cursor object would be a useful result, so the method will return it_<<2:>>_The user can then add as cursor to their âwithâ statement to bind the cursor to a variable name._<<0:>>_
++++++++ PARAGRAPH ++++++++
class DatabaseConnection:
    .._<<1:>>_    def __enter__(self):
        # Code to start a new transaction
        cursor = self.cursor()
        return cursor_<<0:>>_
++++++++ PARAGRAPH ++++++++
The __exit__() method is the most complicated because itâs where most of the work has to be done_<<1:>>_The method has to check if an exception occurred_<<2:>>_If there was no exception, the transaction is committed_<<3:>>_The transaction is rolled back if there was an exception._<<0:>>_
++++++++ PARAGRAPH ++++++++
In the code below, execution will just fall off the end of the function, returning the default value of None_<<1:>>_None is false, so the exception will be re-raised automatically_<<2:>>_If you wished, you could be more explicit and add a return statement at the marked location._<<0:>>_
++++++++ PARAGRAPH ++++++++
class DatabaseConnection:
    .._<<1:>>_    def __exit__(self, type, value, tb):
        if tb is None:
            # No exception, so commit
            self.commit()
        else:
            # Exception occurred, so rollback_<<2:>>_            self.rollback()
            # return False_<<0:>>_
++++++++ PARAGRAPH ++++++++
The contextlib moduleÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
The contextlib module provides some functions and a decorator that are useful when writing objects for use with the âwithâ statement._<<0:>>_
++++++++ PARAGRAPH ++++++++
The decorator is called contextmanager(), and lets you write a single generator function instead of defining a new class_<<1:>>_The generator should yield exactly one value_<<2:>>_The code up to the yield will be executed as the __enter__() method, and the value yielded will be the methodâs return value that will get bound to the variable in the âwithâ statementâs as clause, if any_<<3:>>_The code after the yield will be executed in the __exit__() method_<<4:>>_Any exception raised in the block will be raised by the yield statement._<<0:>>_
++++++++ PARAGRAPH ++++++++
Using this decorator, our database example from the previous section could be written as:_<<0:>>_
++++++++ PARAGRAPH ++++++++
from contextlib import contextmanager_<<0:>>_
++++++++ PARAGRAPH ++++++++
@contextmanager
def db_transaction(connection):
    cursor = connection.cursor()
    try:
        yield cursor
    except:
        connection.rollback()
        raise
    else:
        connection.commit()_<<0:>>_
++++++++ PARAGRAPH ++++++++
db = DatabaseConnection()
with db_transaction(db) as cursor:
    ..._<<0:>>_
++++++++ PARAGRAPH ++++++++
The contextlib module also has a nested(mgr1, mgr2, ...)() function that combines a number of context managers so you donât need to write nested âwithâ statements_<<1:>>_In this example, the single âwithâ statement both starts a database transaction and acquires a thread lock:_<<0:>>_
++++++++ PARAGRAPH ++++++++
lock = threading.Lock()
with nested (db_transaction(db), lock) as (cursor, locked):
    ..._<<0:>>_
++++++++ PARAGRAPH ++++++++
Finally, the closing(object)() function returns object so that it can be bound to a variable, and calls object.close at the end of the block._<<0:>>_
++++++++ PARAGRAPH ++++++++
import urllib, sys
from contextlib import closing_<<0:>>_
++++++++ PARAGRAPH ++++++++
with closing(urllib.urlopen('http://www.yahoo.com')) as f:
    for line in f:
        sys.stdout.write(line)_<<0:>>_
++++++++ PARAGRAPH ++++++++
See also_<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 343 - _<<0:>>_
++++++++ PARAGRAPH ++++++++
The âwithâ statement
    PEP written by Guido van Rossum and Nick Coghlan; implemented by Mike Bland, Guido van Rossum, and Neal Norwitz_<<1:>>_The PEP shows the code generated for a âwithâ statement, which can be helpful in learning how the statement works._<<0:>>_
++++++++ PARAGRAPH ++++++++
The documentation for the contextlib module_<<1:>>_PEP 366: Explicit Relative Imports From a Main ModuleÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
Pythonâs -m switch allows running a module as a script_<<1:>>_When you ran a module that was located inside a package, relative imports didnât work correctly._<<0:>>_
++++++++ PARAGRAPH ++++++++
The fix for Python 2.6 adds a __package__ attribute to modules_<<1:>>_When this attribute is present, relative imports will be relative to the value of this attribute instead of the __name__ attribute._<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 302-style importers can then set __package__ as necessary_<<1:>>_The runpy module that implements the -m switch now does this, so relative imports will now work correctly in scripts running from inside a package_<<2:>>_PEP 370: Per-user site-packages DirectoryÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
When you run Python, the module search path sys.path usually includes a directory whose path ends in "site-packages"_<<1:>>_This directory is intended to hold locally-installed packages available to all users using a machine or a particular site installation._<<0:>>_
++++++++ PARAGRAPH ++++++++
Python 2.6 introduces a convention for user-specific site directories_<<1:>>_The directory varies depending on the platform:_<<0:>>_
++++++++ PARAGRAPH ++++++++
    * Unix and Mac OS X: ~/.local/
    * Windows: %APPDATA%/Python_<<0:>>_
++++++++ PARAGRAPH ++++++++
Within this directory, there will be version-specific subdirectories, such as lib/python2.6/site-packages on Unix/Mac OS and Python26/site-packages on Windows._<<0:>>_
++++++++ PARAGRAPH ++++++++
If you donât like the default directory, it can be overridden by an environment variable_<<1:>>_PYTHONUSERBASE sets the root directory used for all Python versions supporting this feature_<<2:>>_On Windows, the directory for application-specific data can be changed by setting the APPDATA environment variable_<<3:>>_You can also modify the site.py file for your Python installation._<<0:>>_
++++++++ PARAGRAPH ++++++++
The feature can be disabled entirely by running Python with the -s option or setting the PYTHONNOUSERSITE environment variable._<<0:>>_
++++++++ PARAGRAPH ++++++++
See also_<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 370 - Per-user site-packages Directory
    PEP written and implemented by Christian Heimes._<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 371: The multiprocessing PackageÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
The new multiprocessing package lets Python programs create new processes that will perform a computation and return a result to the parent_<<1:>>_The parent and child processes can communicate using queues and pipes, synchronize their operations using locks and semaphores, and can share simple arrays of data._<<0:>>_
++++++++ PARAGRAPH ++++++++
The multiprocessing module started out as an exact emulation of the threading module using processes instead of threads_<<1:>>_That goal was discarded along the path to Python 2.6, but the general approach of the module is still similar_<<2:>>_The fundamental class is the Process, which is passed a callable object and a collection of arguments_<<3:>>_The start() method sets the callable running in a subprocess, after which you can call the is_alive() method to check whether the subprocess is still running and the join() method to wait for the process to exit._<<0:>>_
++++++++ PARAGRAPH ++++++++
Hereâs a simple example where the subprocess will calculate a factorial_<<1:>>_The function doing the calculation is written strangely so that it takes significantly longer when the input argument is a multiple of 4._<<0:>>_
++++++++ PARAGRAPH ++++++++
import time
from multiprocessing import Process, Queue_<<0:>>_
++++++++ PARAGRAPH ++++++++

def factorial(queue, N):
    "Compute a factorial."
    # If N is a multiple of 4, this function will take much longer_<<1:>>_    if (N % 4) == 0:
        time.sleep(.05 * N/4)_<<0:>>_
++++++++ PARAGRAPH ++++++++
    # Calculate the result
    fact = 1L
    for i in range(1, N+1):
        fact = fact * i_<<0:>>_
++++++++ PARAGRAPH ++++++++
    # Put the result on the queue
    queue.put(fact)_<<0:>>_
++++++++ PARAGRAPH ++++++++
if __name__ == '__main__':
    queue = Queue()_<<0:>>_
++++++++ PARAGRAPH ++++++++
    N = 5_<<0:>>_
++++++++ PARAGRAPH ++++++++
    p = Process(target=factorial, args=(queue, N))
    p.start()
    p.join()_<<0:>>_
++++++++ PARAGRAPH ++++++++
    result = queue.get()
    print 'Factorial', N, '=', result_<<0:>>_
++++++++ PARAGRAPH ++++++++
A Queue is used to communicate the input parameter N and the result_<<1:>>_The Queue object is stored in a global variable_<<2:>>_The child process will use the value of the variable when the child was created; because itâs a Queue, parent and child can use the object to communicate_<<3:>>_(If the parent were to change the value of the global variable, the childâs value would be unaffected, and vice versa.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
Two other classes, Pool and Manager, provide higher-level interfaces_<<1:>>_Pool will create a fixed number of worker processes, and requests can then be distributed to the workers by calling apply() or apply_async() to add a single request, and map() or map_async() to add a number of requests_<<2:>>_The following code uses a Pool to spread requests across 5 worker processes and retrieve a list of results:_<<0:>>_
++++++++ PARAGRAPH ++++++++
from multiprocessing import Pool_<<0:>>_
++++++++ PARAGRAPH ++++++++
def factorial(N, dictionary):
    "Compute a factorial."
    .._<<1:>>_p = Pool(5)
result = p.map(factorial, range(1, 1000, 10))
for v in result:
    print v_<<0:>>_
++++++++ PARAGRAPH ++++++++
This produces the following output:_<<0:>>_
++++++++ PARAGRAPH ++++++++
1
39916800
51090942171709440000
8222838654177922817725562880000000
33452526613163807108170062053440751665152000000000
..._<<0:>>_
++++++++ PARAGRAPH ++++++++
The other high-level interface, the Manager class, creates a separate server process that can hold master copies of Python data structures_<<1:>>_Other processes can then access and modify these data structures using proxy objects_<<2:>>_The following example creates a shared dictionary by calling the dict() method; the worker processes then insert values into the dictionary_<<3:>>_(Locking is not done for you automatically, which doesnât matter in this example_<<4:>>_Managerâs methods also include Lock(), RLock(), and Semaphore() to create shared locks.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
import time
from multiprocessing import Pool, Manager_<<0:>>_
++++++++ PARAGRAPH ++++++++
def factorial(N, dictionary):
    "Compute a factorial."
    # Calculate the result
    fact = 1L
    for i in range(1, N+1):
        fact = fact * i_<<0:>>_
++++++++ PARAGRAPH ++++++++
    # Store result in dictionary
    dictionary[N] = fact_<<0:>>_
++++++++ PARAGRAPH ++++++++
if __name__ == '__main__':
    p = Pool(5)
    mgr = Manager()
    d = mgr.dict()         # Create shared dictionary_<<0:>>_
++++++++ PARAGRAPH ++++++++
    # Run tasks using the pool
    for N in range(1, 1000, 10):
        p.apply_async(factorial, (N, d))_<<0:>>_
++++++++ PARAGRAPH ++++++++
# Mark pool as closed -- no more tasks can be added_<<1:>>_p.close()_<<0:>>_
++++++++ PARAGRAPH ++++++++
# Wait for tasks to exit
p.join()_<<0:>>_
++++++++ PARAGRAPH ++++++++
# Output results
for k, v in sorted(d.items()):
    print k, v_<<0:>>_
++++++++ PARAGRAPH ++++++++
This will produce the output:_<<0:>>_
++++++++ PARAGRAPH ++++++++
1 1
11 39916800
21 51090942171709440000
31 8222838654177922817725562880000000
41 33452526613163807108170062053440751665152000000000
51 15511187532873822802242430164693032110632597200169861120000..._<<0:>>_
++++++++ PARAGRAPH ++++++++
See also_<<0:>>_
++++++++ PARAGRAPH ++++++++
The documentation for the multiprocessing module._<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 371 - Addition of the multiprocessing package
    PEP written by Jesse Noller and Richard Oudkerk; implemented by Richard Oudkerk and Jesse Noller._<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 3101: Advanced String FormattingÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
In Python 3.0, the % operator is supplemented by a more powerful string formatting method, format()_<<1:>>_Support for the str.format() method has been backported to Python 2.6._<<0:>>_
++++++++ PARAGRAPH ++++++++
In 2.6, both 8-bit and Unicode strings have a .format() method that treats the string as a template and takes the arguments to be formatted_<<1:>>_The formatting template uses curly brackets ({, }) as special characters:_<<0:>>_
++++++++ PARAGRAPH ++++++++
>>> # Substitute positional argument 0 into the string_<<1:>>_>>> "User ID: {0}".format("root")
'User ID: root'
>>> # Use the named keyword arguments
>>> "User ID: {uid}   Last seen: {last_login}".format(
.._<<2:>>_   uid="root",
.._<<3:>>_   last_login = "5 Mar 2008 07:20")
'User ID: root   Last seen: 5 Mar 2008 07:20'_<<0:>>_
++++++++ PARAGRAPH ++++++++
Curly brackets can be escaped by doubling them:_<<0:>>_
++++++++ PARAGRAPH ++++++++
>>> "Empty dict: {{}}".format()
"Empty dict: {}"_<<0:>>_
++++++++ PARAGRAPH ++++++++
Field names can be integers indicating positional arguments, such as {0}, {1}, etc_<<1:>>_or names of keyword arguments_<<2:>>_You can also supply compound field names that read attributes or access dictionary keys:_<<0:>>_
++++++++ PARAGRAPH ++++++++
>>> import sys
>>> print 'Platform: {0.platform}\nPython version: {0.version}'.format(sys)
Platform: darwin
Python version: 2.6a1+ (trunk:61261M, Mar  5 2008, 20:29:41)
[GCC 4.0.1 (Apple Computer, Inc_<<1:>>_build 5367)]'_<<0:>>_
++++++++ PARAGRAPH ++++++++
>>> import mimetypes
>>> 'Content-type: {0[.mp4]}'.format(mimetypes.types_map)
'Content-type: video/mp4'_<<0:>>_
++++++++ PARAGRAPH ++++++++
Note that when using dictionary-style notation such as [.mp4], you donât need to put any quotation marks around the string; it will look up the value using .mp4 as the key._<<0:>>_
++++++++ PARAGRAPH ++++++++
 Strings beginning with a number will be converted to an integer_<<1:>>_You canât write more complicated expressions inside a format string._<<0:>>_
++++++++ PARAGRAPH ++++++++
So far weâve shown how to specify which field to substitute into the resulting string_<<1:>>_The precise formatting used is also controllable by adding a colon followed by a format specifier_<<2:>>_For example:_<<0:>>_
++++++++ PARAGRAPH ++++++++
>>> # Field 0: left justify, pad to 15 characters
>>> # Field 1: right justify, pad to 6 characters
>>> fmt = '{0:15} ${1:>6}'
>>> fmt.format('Registration', 35)
'Registration    $    35'
>>> fmt.format('Tutorial', 50)
'Tutorial        $    50'
>>> fmt.format('Banquet', 125)
'Banquet         $   125'_<<0:>>_
++++++++ PARAGRAPH ++++++++
Format specifiers can reference other fields through nesting:_<<0:>>_
++++++++ PARAGRAPH ++++++++
>>> fmt = '{0:{1}}'
>>> width = 15
>>> fmt.format('Invoice #1234', width)
'Invoice #1234  '
>>> width = 35
>>> fmt.format('Invoice #1234', width)
'Invoice #1234                      '_<<0:>>_
++++++++ PARAGRAPH ++++++++
The alignment of a field within the desired width can be specified:
Character 	Effect
< (default) 	Left-align
> 	Right-align
^ 	Center
= 	(For numeric types only) Pad after the sign._<<0:>>_
++++++++ PARAGRAPH ++++++++
Format specifiers can also include a presentation type, which controls how the value is formatted_<<1:>>_For example, floating-point numbers can be formatted as a general number or in exponential notation:_<<0:>>_
++++++++ PARAGRAPH ++++++++
>>> '{0:g}'.format(3.75)
'3.75'
>>> '{0:e}'.format(3.75)
'3.750000e+00'_<<0:>>_
++++++++ PARAGRAPH ++++++++
A variety of presentation types are available_<<1:>>_Consult the 2.6 documentation for a complete list; hereâs a sample:
b 	Binary_<<2:>>_Outputs the number in base 2_<<3:>>_c 	Character_<<4:>>_Converts the integer to the corresponding Unicode character before printing_<<5:>>_d 	Decimal Integer_<<6:>>_Outputs the number in base 10_<<7:>>_o 	Octal format_<<8:>>_Outputs the number in base 8_<<9:>>_x 	Hex format_<<10:>>_Outputs the number in base 16, using lower-case letters for the digits above 9_<<11:>>_e 	Exponent notation_<<12:>>_Prints the number in scientific notation using the letter âeâ to indicate the exponent_<<13:>>_g 	General format_<<14:>>_This prints the number as a fixed-point number, unless the number is too large, in which case it switches to âeâ exponent notation_<<15:>>_n 	Number_<<16:>>_This is the same as âgâ (for floats) or âdâ (for integers), except that it uses the current locale setting to insert the appropriate number separator characters_<<17:>>_% 	Percentage_<<18:>>_Multiplies the number by 100 and displays in fixed (âfâ) format, followed by a percent sign._<<0:>>_
++++++++ PARAGRAPH ++++++++
Classes and types can define a __format__() method to control how theyâre formatted_<<1:>>_It receives a single argument, the format specifier:_<<0:>>_
++++++++ PARAGRAPH ++++++++
def __format__(self, format_spec):
    if isinstance(format_spec, unicode):
        return unicode(str(self))
    else:
        return str(self)_<<0:>>_
++++++++ PARAGRAPH ++++++++
Thereâs also a format() built-in that will format a single value_<<1:>>_It calls the typeâs __format__() method with the provided specifier:_<<0:>>_
++++++++ PARAGRAPH ++++++++
>>> format(75.6564, '.2f')
'75.66'_<<0:>>_
++++++++ PARAGRAPH ++++++++
See also_<<0:>>_
++++++++ PARAGRAPH ++++++++
Format String Syntax
    The reference documentation for format fields_<<1:>>_PEP 3101 - Advanced String Formatting
    PEP written by Talin_<<2:>>_Implemented by Eric Smith._<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 3105: print As a FunctionÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
The print statement becomes the print() function in Python 3.0_<<1:>>_Making print() a function makes it possible to replace the function by doing def print(...) or importing a new function from somewhere else._<<0:>>_
++++++++ PARAGRAPH ++++++++
Python 2.6 has a __future__ import that removes print as language syntax, letting you use the functional form instead_<<1:>>_For example:_<<0:>>_
++++++++ PARAGRAPH ++++++++
>>> from __future__ import print_function
>>> print('# of entries', len(dictionary), file=sys.stderr)_<<0:>>_
++++++++ PARAGRAPH ++++++++
The signature of the new function is:_<<0:>>_
++++++++ PARAGRAPH ++++++++
def print(*args, sep=' ', end='\n', file=None)_<<0:>>_
++++++++ PARAGRAPH ++++++++
The parameters are:_<<0:>>_
++++++++ PARAGRAPH ++++++++
        * args: positional arguments whose values will be printed out_<<1:>>_        * sep: the separator, which will be printed between arguments_<<2:>>_        * end: the ending text, which will be printed after all of the arguments have been output_<<3:>>_        * file: the file object to which the output will be sent._<<0:>>_
++++++++ PARAGRAPH ++++++++
See also_<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 3105 - Make print a function
    PEP written by Georg Brandl._<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 3110: Exception-Handling ChangesÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
One error that Python programmers occasionally make is writing the following code:_<<0:>>_
++++++++ PARAGRAPH ++++++++
try:
    .._<<1:>>_except TypeError, ValueError:  # Wrong!
    ..._<<0:>>_
++++++++ PARAGRAPH ++++++++
The author is probably trying to catch both TypeError and ValueError exceptions, but this code actually does something different: it will catch TypeError and bind the resulting exception object to the local name "ValueError"_<<1:>>_The ValueError exception will not be caught at all_<<2:>>_The correct code specifies a tuple of exceptions:_<<0:>>_
++++++++ PARAGRAPH ++++++++
try:
    .._<<1:>>_except (TypeError, ValueError):
    ..._<<0:>>_
++++++++ PARAGRAPH ++++++++
This error happens because the use of the comma here is ambiguous: does it indicate two different nodes in the parse tree, or a single node thatâs a tuple?_<<0:>>_
++++++++ PARAGRAPH ++++++++
Python 3.0 makes this unambiguous by replacing the comma with the word âasâ_<<1:>>_To catch an exception and store the exception object in the variable exc, you must write:_<<0:>>_
++++++++ PARAGRAPH ++++++++
try:
    .._<<1:>>_except TypeError as exc:
    ..._<<0:>>_
++++++++ PARAGRAPH ++++++++
Python 3.0 will only support the use of âasâ, and therefore interprets the first example as catching two different exceptions_<<1:>>_Python 2.6 supports both the comma and âasâ, so existing code will continue to work_<<2:>>_We therefore suggest using âasâ when writing new Python code that will only be executed with 2.6._<<0:>>_
++++++++ PARAGRAPH ++++++++
See also_<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 3110 - Catching Exceptions in Python 3000
    PEP written and implemented by Collin Winter._<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 3112: Byte LiteralsÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
Python 3.0 adopts Unicode as the languageâs fundamental string type and denotes 8-bit literals differently, either as b'string' or using a bytes constructor_<<1:>>_For future compatibility, Python 2.6 adds bytes as a synonym for the str type, and it also supports the b'' notation._<<0:>>_
++++++++ PARAGRAPH ++++++++
The 2.6 str differs from 3.0âs bytes type in various ways; most notably, the constructor is completely different_<<1:>>_In 3.0, bytes([65, 66, 67]) is 3 elements long, containing the bytes representing ABC; in 2.6, bytes([65, 66, 67]) returns the 12-byte string representing the str() of the list._<<0:>>_
++++++++ PARAGRAPH ++++++++
The primary use of bytes in 2.6 will be to write tests of object type such as isinstance(x, bytes)_<<1:>>_This will help the 2to3 converter, which canât tell whether 2.x code intends strings to contain either characters or 8-bit bytes; you can now use either bytes or str to represent your intention exactly, and the resulting code will also be correct in Python 3.0._<<0:>>_
++++++++ PARAGRAPH ++++++++
Thereâs also a __future__ import that causes all string literals to become Unicode strings_<<1:>>_This means that \u escape sequences can be used to include Unicode characters:_<<0:>>_
++++++++ PARAGRAPH ++++++++
from __future__ import unicode_literals_<<0:>>_
++++++++ PARAGRAPH ++++++++
s = ('\u751f\u3080\u304e\u3000\u751f\u3054'
     '\u3081\u3000\u751f\u305f\u307e\u3054')_<<0:>>_
++++++++ PARAGRAPH ++++++++
print len(s)               # 12 Unicode characters_<<0:>>_
++++++++ PARAGRAPH ++++++++
At the C level, Python 3.0 will rename the existing 8-bit string type, called PyStringObject in Python 2.x, to PyBytesObject_<<1:>>_Python 2.6 uses #define to support using the names PyBytesObject, PyBytes_Check, PyBytes_FromStringAndSize, and all the other functions and macros used with strings._<<0:>>_
++++++++ PARAGRAPH ++++++++
Instances of the bytes type are immutable just as strings are_<<1:>>_A new bytearray type stores a mutable sequence of bytes:_<<0:>>_
++++++++ PARAGRAPH ++++++++
>>> bytearray([65, 66, 67])
bytearray(b'ABC')
>>> b = bytearray(u'\u21ef\u3244', 'utf-8')
>>> b
bytearray(b'\xe2\x87\xaf\xe3\x89\x84')
>>> b[0] = '\xe3'
>>> b
bytearray(b'\xe3\x87\xaf\xe3\x89\x84')
>>> unicode(str(b), 'utf-8')
u'\u31ef \u3244'_<<0:>>_
++++++++ PARAGRAPH ++++++++
Byte arrays support most of the methods of string types, such as startswith()/endswith(), find()/rfind(), and some of the methods of lists, such as append(), pop(), and reverse()._<<0:>>_
++++++++ PARAGRAPH ++++++++
>>> b = bytearray('ABC')
>>> b.append('d')
>>> b.append(ord('e'))
>>> b
bytearray(b'ABCde')_<<0:>>_
++++++++ PARAGRAPH ++++++++
Thereâs also a corresponding C API, with PyByteArray_FromObject, PyByteArray_FromStringAndSize, and various other functions._<<0:>>_
++++++++ PARAGRAPH ++++++++
See also_<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 3112 - Bytes literals in Python 3000
    PEP written by Jason Orendorff; backported to 2.6 by Christian Heimes._<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 3116: New I/O LibraryÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
Pythonâs built-in file objects support a number of methods, but file-like objects donât necessarily support all of them_<<1:>>_Objects that imitate files usually support read() and write(), but they may not support readline(), for example_<<2:>>_Python 3.0 introduces a layered I/O library in the io module that separates bu_<<0:>>_
++++++++ PARAGRAPH ++++++++
ffering and text-handling features from the fundamental read and write operations._<<0:>>_
++++++++ PARAGRAPH ++++++++
There are three levels of abstract base classes provided by the io module:_<<0:>>_
++++++++ PARAGRAPH ++++++++
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      RawIOBase defines raw I/O operations: read(), readinto(), write(), seek(), tell(), truncate(), and close()_<<1:>>_Most of the methods of this class will often map to a single system call_<<2:>>_There are also readable(), writable(), and seekable() methods for determining what operations a given object will allow._<<0:>>_
++++++++ PARAGRAPH ++++++++
      Python 3.0 has concrete implementations of this class for files and sockets, but Python 2.6 hasnât restructured its file and socket objects in this way_<<1:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      BufferedIOBase is an abstract base class that buffers data in memory to reduce the number of system calls used, making I/O processing more efficient_<<1:>>_It supports all of the methods of RawIOBase, and adds a raw attribute holding the underlying raw object._<<0:>>_
++++++++ PARAGRAPH ++++++++
      There are five concrete classes implementing this ABC_<<1:>>_BufferedWriter and BufferedReader are for objects that support write-only or read-only usage that have a seek() method for random access_<<2:>>_BufferedRandom objects support read and write access upon the same underlying stream, and BufferedRWPair is for objects such as TTYs that have both read and write operations acting upon unconnected streams of data_<<3:>>_The BytesIO class supports reading, writing, and seeking over an in-memory buffer_<<4:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      TextIOBase: Provides functions for reading and writing strings (remember, strings will be Unicode in Python 3.0), and supporting universal newlines_<<1:>>_TextIOBase defines the readline() method and supports iteration upon objects._<<0:>>_
++++++++ PARAGRAPH ++++++++
      There are two concrete implementations_<<1:>>_TextIOWrapper wraps a buffered I/O object, supporting all of the methods for text I/O and adding a buffer attribute for access to the underlying object_<<2:>>_StringIO simply buffers everything in memory without ever writing anything to disk._<<0:>>_
++++++++ PARAGRAPH ++++++++
      (In Python 2.6, io.StringIO is implemented in pure Python, so itâs pretty slow_<<1:>>_You should therefore stick with the existing StringIO module or cStringIO for now_<<2:>>_At some point Python 3.0âs io module will be rewritten into C for speed, and perhaps the C implementation will be backported to the 2.x releases.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
In Python 2.6, the underlying implementations havenât been restructured to build on top of the io moduleâs classes_<<1:>>_The module is being provided to make it easier to write code thatâs forward-compatible with 3.0, and to save developers the effort of writing their own implementations of buffering and text I/O._<<0:>>_
++++++++ PARAGRAPH ++++++++
See also_<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 3116 - New I/O
    PEP written by Daniel Stutzbach, Mike Verdone, and Guido van Rossum_<<1:>>_Code by Guido van Rossum, Georg Brandl, Walter Doerwald, Jeremy Hylton, Martin von Loewis, Tony Lownds, and others._<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 3118: Revised Buffer ProtocolÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
The buffer protocol is a C-level API that lets Python types exchange pointers into their internal representations_<<1:>>_A memory-mapped file can be viewed as a buffer of characters, for example, and this lets another module such as re treat memory-mapped files as a string of characters to be searched._<<0:>>_
++++++++ PARAGRAPH ++++++++
The primary users of the buffer protocol are numeric-processing packages such as NumPy, which expose the internal representation of arrays so that callers can write data directly into an array instead of going through a slower API_<<1:>>_This PEP updates the buffer protocol in light of experience from NumPy development, adding a number of new features such as indicating the shape of an array or locking a memory region._<<0:>>_
++++++++ PARAGRAPH ++++++++
The most important new C API function is PyObject_GetBuffer(PyObject *obj, Py_buffer *view, int flags), which takes an object and a set of flags, and fills in the Py_buffer structure with information about the objectâs memory representation_<<1:>>_Objects can use this operation to lock memory in place while an external caller could be modifying the contents, so thereâs a corresponding PyBuffer_Release(Py_buffer *view) to indicate that the external caller is done._<<0:>>_
++++++++ PARAGRAPH ++++++++
The flags argument to PyObject_GetBuffer specifies constraints upon the memory returned_<<1:>>_Some examples are:_<<0:>>_
++++++++ PARAGRAPH ++++++++
        * PyBUF_WRITABLE indicates that the memory must be writable_<<1:>>_        * PyBUF_LOCK requests a read-only or exclusive lock on the memory_<<2:>>_        * PyBUF_C_CONTIGUOUS and PyBUF_F_CONTIGUOUS requests a C-contiguous (last dimension varies the fastest) or Fortran-contiguous (first dimension varies the fastest) array layout._<<0:>>_
++++++++ PARAGRAPH ++++++++
Two new argument codes for PyArg_ParseTuple, s* and z*, return locked buffer objects for a parameter._<<0:>>_
++++++++ PARAGRAPH ++++++++
See also_<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 3118 - Revising the buffer protocol
    PEP written by Travis Oliphant and Carl Banks; implemented by Travis Oliphant._<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 3119: Abstract Base ClassesÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
Some object-oriented languages such as Java support interfaces, declaring that a class has a given set of methods or supports a given access protocol_<<1:>>_Abstract Base Classes (or ABCs) are an equivalent feature for Python_<<2:>>_The ABC support consists of an abc module containing a metaclass called ABCMeta, special handling of this metaclass by the isinstance() and issubclass() built-ins, and a collection of basic ABCs that the Python developers think will be widely useful_<<3:>>_Future versions of Python will probably add more ABCs._<<0:>>_
++++++++ PARAGRAPH ++++++++
Letâs say you have a particular class and wish to know whether it supports dictionary-style access_<<1:>>_The phrase âdictionary-styleâ is vague, however_<<2:>>_It probably means that accessing items with obj[1] works_<<3:>>_Does it imply that setting items with obj[2] = value works? Or that the object will have keys(), values(), and items() methods? What about the iterative variants such as iterkeys()? copy() and update()? Iterating over the object with iter()?_<<0:>>_
++++++++ PARAGRAPH ++++++++
The Python 2.6 collections module includes a number of different ABCs that represent these distinctions_<<1:>>_Iterable indicates that a class defines __iter__(), and Container means the class defines a __contains__() method and therefore supports x in y expressions_<<2:>>_The basic dictionary interface of getting items, setting items, and keys(), values(), and items(), is defined by the MutableMapping ABC._<<0:>>_
++++++++ PARAGRAPH ++++++++
You can derive your own classes from a particular ABC to indicate they support that ABCâs interface:_<<0:>>_
++++++++ PARAGRAPH ++++++++
import collections_<<0:>>_
++++++++ PARAGRAPH ++++++++
class Storage(collections.MutableMapping):
    ..._<<0:>>_
++++++++ PARAGRAPH ++++++++
Alternatively, you could write the class without deriving from the desired ABC and instead register the class by calling the ABCâs register() method:_<<0:>>_
++++++++ PARAGRAPH ++++++++
import collections_<<0:>>_
++++++++ PARAGRAPH ++++++++
class Storage:
    ..._<<0:>>_
++++++++ PARAGRAPH ++++++++
collections.MutableMapping.register(Storage)_<<0:>>_
++++++++ PARAGRAPH ++++++++
For classes that you write, deriving from the ABC is probably clearer_<<1:>>_The register() method is useful when youâve written a new ABC that can describe an existing type or class, or if you want to declare that some third-party class implements an ABC_<<2:>>_For example, if you defined a PrintableType ABC, itâs legal to do:_<<0:>>_
++++++++ PARAGRAPH ++++++++
# Register Python's types
PrintableType.register(int)
PrintableType.register(float)
PrintableType.register(str)_<<0:>>_
++++++++ PARAGRAPH ++++++++
Classes should obey the semantics specified by an ABC, but Python canât check this; itâs up to the class author to understand the ABCâs requirements and to implement the code accordingly._<<0:>>_
++++++++ PARAGRAPH ++++++++
To check whether an object supports a particular interface, you can now write:_<<0:>>_
++++++++ PARAGRAPH ++++++++
def func(d):
    if not isinstance(d, collections.MutableMapping):
        raise ValueError("Mapping object expected, not %r" % d)_<<0:>>_
++++++++ PARAGRAPH ++++++++
Donât feel that you must now begin writing lots of checks as in the above example_<<1:>>_Python has a strong tradition of duck-typing, where explicit type-checking is never done and code simply calls methods on an object, trusting that those methods will be there and raising an exception if they arenât_<<2:>>_Be judicious in checking for ABCs and only do it where itâs absolutely necessary._<<0:>>_
++++++++ PARAGRAPH ++++++++
You can write your own ABCs by using abc.ABCMeta as the metaclass in a class definition:_<<0:>>_
++++++++ PARAGRAPH ++++++++
from abc import ABCMeta, abstractmethod_<<0:>>_
++++++++ PARAGRAPH ++++++++
class Drawable():
    __metaclass__ = ABCMeta_<<0:>>_
++++++++ PARAGRAPH ++++++++
    @abstractmethod
    def draw(self, x, y, scale=1.0):
        pass_<<0:>>_
++++++++ PARAGRAPH ++++++++
    def draw_doubled(self, x, y):
        self.draw(x, y, scale=2.0)_<<0:>>_
++++++++ PARAGRAPH ++++++++

class Square(Drawable):
    def draw(self, x, y, scale):
        ..._<<0:>>_
++++++++ PARAGRAPH ++++++++
In the Drawable ABC above, the draw_doubled() met_<<0:>>_
++++++++ PARAGRAPH ++++++++
hod renders the object at twice its size and can be implemented in terms of other methods described in Drawable_<<1:>>_Classes implementing this ABC therefore donât need to provide their own implementation of draw_doubled(), though they can do so_<<2:>>_An implementation of draw() is necessary, though; the ABC canât provide a useful generic implementation._<<0:>>_
++++++++ PARAGRAPH ++++++++
You can apply the @abstractmethod decorator to methods such as draw() that must be implemented; Python will then raise an exception for classes that donât define the method_<<1:>>_Note that the exception is only raised when you actually try to create an instance of a subclass lacking the method:_<<0:>>_
++++++++ PARAGRAPH ++++++++
>>> class Circle(Drawable):
.._<<1:>>_    pass
.._<<2:>>_>>> c = Circle()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: Can't instantiate abstract class Circle with abstract methods draw
>>>_<<0:>>_
++++++++ PARAGRAPH ++++++++
Abstract data attributes can be declared using the @abstractproperty decorator:_<<0:>>_
++++++++ PARAGRAPH ++++++++
from abc import abstractproperty
..._<<0:>>_
++++++++ PARAGRAPH ++++++++
@abstractproperty
def readonly(self):
   return self._x_<<0:>>_
++++++++ PARAGRAPH ++++++++
Subclasses must then define a readonly() property._<<0:>>_
++++++++ PARAGRAPH ++++++++
See also_<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 3119 - Introducing Abstract Base Classes
    PEP written by Guido van Rossum and Talin_<<1:>>_Implemented by Guido van Rossum_<<2:>>_Backported to 2.6 by Benjamin Aranguren, with Alex Martelli._<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 3127: Integer Literal Support and SyntaxÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
Python 3.0 changes the syntax for octal (base-8) integer literals, prefixing them with â0oâ or â0Oâ instead of a leading zero, and adds support for binary (base-2) integer literals, signalled by a â0bâ or â0Bâ prefix._<<0:>>_
++++++++ PARAGRAPH ++++++++
Python 2.6 doesnât drop support for a leading 0 signalling an octal number, but it does add support for â0oâ and â0bâ:_<<0:>>_
++++++++ PARAGRAPH ++++++++
>>> 0o21, 2*8 + 1
(17, 17)
>>> 0b101111
47_<<0:>>_
++++++++ PARAGRAPH ++++++++
The oct() built-in still returns numbers prefixed with a leading zero, and a new bin() built-in returns the binary representation for a number:_<<0:>>_
++++++++ PARAGRAPH ++++++++
>>> oct(42)
'052'
>>> future_builtins.oct(42)
'0o52'
>>> bin(173)
'0b10101101'_<<0:>>_
++++++++ PARAGRAPH ++++++++
The int() and long() built-ins will now accept the â0oâ and â0bâ prefixes when base-8 or base-2 are requested, or when the base argument is zero (signalling that the base used should be determined from the string):_<<0:>>_
++++++++ PARAGRAPH ++++++++
>>> int ('0o52', 0)
42
>>> int('1101', 2)
13
>>> int('0b1101', 2)
13
>>> int('0b1101', 0)
13_<<0:>>_
++++++++ PARAGRAPH ++++++++
See also_<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 3127 - Integer Literal Support and Syntax
    PEP written by Patrick Maupin; backported to 2.6 by Eric Smith._<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 3129: Class DecoratorsÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
Decorators have been extended from functions to classes_<<1:>>_Itâs now legal to write:_<<0:>>_
++++++++ PARAGRAPH ++++++++
@foo
@bar
class A:
  pass_<<0:>>_
++++++++ PARAGRAPH ++++++++
This is equivalent to:_<<0:>>_
++++++++ PARAGRAPH ++++++++
class A:
  pass_<<0:>>_
++++++++ PARAGRAPH ++++++++
A = foo(bar(A))_<<0:>>_
++++++++ PARAGRAPH ++++++++
See also_<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 3129 - Class Decorators
    PEP written by Collin Winter._<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 3141: A Type Hierarchy for NumbersÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
Python 3.0 adds several abstract base classes for numeric types inspired by Schemeâs numeric tower_<<1:>>_These classes were backported to 2.6 as the numbers module._<<0:>>_
++++++++ PARAGRAPH ++++++++
The most general ABC is Number_<<1:>>_It defines no operations at all, and only exists to allow checking if an object is a number by doing isinstance(obj, Number)._<<0:>>_
++++++++ PARAGRAPH ++++++++
Complex is a subclass of Number_<<1:>>_Complex numbers can undergo the basic operations of addition, subtraction, multiplication, division, and exponentiation, and you can retrieve the real and imaginary parts and obtain a numberâs conjugate_<<2:>>_Pythonâs built-in complex type is an implementation of Complex._<<0:>>_
++++++++ PARAGRAPH ++++++++
Real further derives from Complex, and adds operations that only work on real numbers: floor(), trunc(), rounding, taking the remainder mod N, floor division, and comparisons._<<0:>>_
++++++++ PARAGRAPH ++++++++
Rational numbers derive from Real, have numerator and denominator properties, and can be converted to floats_<<1:>>_Python 2.6 adds a simple rational-number class, Fraction, in the fractions module_<<2:>>_(Itâs called Fraction instead of Rational to avoid a name clash with numbers.Rational.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
Integral numbers derive from Rational, and can be shifted left and right with << and >>, combined using bitwise operations such as & and |, and can be used as array indexes and slice boundaries._<<0:>>_
++++++++ PARAGRAPH ++++++++
In Python 3.0, the PEP slightly redefines the existing built-ins round(), math.floor(), math.ceil(), and adds a new one, math.trunc(), thatâs been backported to Python 2.6_<<1:>>_math.trunc() rounds toward zero, returning the closest Integral thatâs between the functionâs argument and zero._<<0:>>_
++++++++ PARAGRAPH ++++++++
See also_<<0:>>_
++++++++ PARAGRAPH ++++++++
PEP 3141 - A Type Hierarchy for Numbers
    PEP written by Jeffrey Yasskin._<<0:>>_
++++++++ PARAGRAPH ++++++++
Schemeâs numerical tower, from the Guile manual._<<0:>>_
++++++++ PARAGRAPH ++++++++
Schemeâs number datatypes from the R5RS Scheme specification_<<1:>>_The fractions ModuleÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
To fill out the hierarchy of numeric types, the fractions module provides a rational-number class_<<1:>>_Rational numbers store their values as a numerator and denominator forming a fraction, and can exactly represent numbers such as 2/3 that floating-point numbers can only approximate._<<0:>>_
++++++++ PARAGRAPH ++++++++
The Fraction constructor takes two Integral values that will be the numerator and denominator of the resulting fraction._<<0:>>_
++++++++ PARAGRAPH ++++++++
>>> from fractions import Fraction
>>> a = Fraction(2, 3)
>>> b = Fraction(2, 5)
>>> float(a), float(b)
(0.66666666666666663, 0.40000000000000002)
>>> a+b
Fraction(16, 15)
>>> a/b
Fraction(5, 3)_<<0:>>_
++++++++ PARAGRAPH ++++++++
For converting floating-point numbers to rationals, the float type now has an as_integer_ratio() method that returns the numerator and denominator for a fraction that evaluates to the same floating-point value:_<<0:>>_
++++++++ PARAGRAPH ++++++++
>>> (2.5) .as_integer_ratio()
(5, 2)
>>> (3.1415) .as_integer_ratio()
(7074029114692207L, 2251799813685248L)
>>> (1./3) .as_integer_ratio()
(6004799503160661L, 18014398509481984L)_<<0:>>_
++++++++ PARAGRAPH ++++++++
Note that values that can only be approximated by floating-point numbers, such as 1./3, are not simplified to the number being approximated; the fraction attempts to match the floating-point value exactly._<<0:>>_
++++++++ PARAGRAPH ++++++++
The fractions module is based upon an implementation by Sjoerd Mullender that was in Pythonâs Demo/classes/ directory for a long time_<<1:>>_This implementation was significantly updated by Jeffrey Yasskin_<<2:>>_Other Language ChangesÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
Some smaller changes made to the core Python language are:_<<0:>>_
++++++++ PARAGRAPH ++++++++
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The hasattr() function was catching and ignoring all errors, under the assumption that they meant a __getattr__() method was failing somehow and the return value of hasattr() would therefore be False_<<1:>>_This logic shouldnât be applied to KeyboardInterrupt and SystemExit, however; Python 2.6 will no longer discard such exceptions when hasattr() encounters them_<<2:>>_(Fixed by Benjamin Peterson; issue 2196.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      When calling a function using the ** syntax to provide keyword arguments, you are no longer required to use a Python dictionary; any mapping will now work:_<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> def f(**kw):
      .._<<1:>>_   print sorted(kw)
      .._<<2:>>_      >>> ud=UserDict.UserDict()
      >>> ud['a'] = 1
      >>> ud['b'] = 'string'
      >>> f(**ud)
      ['a', 'b']_<<0:>>_
++++++++ PARAGRAPH ++++++++
      (Contributed by Alexander Belopolsky; issue 1686487.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Itâs also become legal to provide keyword arguments after a *args argument to a function call._<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> def f(*args, **kw):
      .._<<1:>>_    print args, kw
      .._<<2:>>_      >>> f(1,2,3, *(4,5,6), keyword=13)
      (1, 2, 3, 4, 5, 6) {'keyword': 13}_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Previously this would have been a syntax error_<<1:>>_(Contributed by Amaury Forgeot dâArc; issue 3473.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      A new built-in, next(iterator, [default]) returns the next item from the specified iterator_<<1:>>_If the default argument is supplied, it will be returned if iterator has been exhausted; otherwise, the StopIteration exception will be raised_<<2:>>_(Backported in issue 2719.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Tuples now have index() and count() methods matching the list typeâs index() and count() methods:_<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> t = (0,1,2,3,4,0,1,2)
      >>> t.index(3)
      3
      >>> t.count(0)
      2_<<0:>>_
++++++++ PARAGRAPH ++++++++
      (Contributed by Raymond Hettinger)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The built-in types now have improved support for extended slicing syntax, accepting various combinations of (start, stop, step)_<<1:>>_Previously, the support was partial and certain corner cases wouldnât work_<<2:>>_(Implemented by Thomas Wouters.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Properties now have three attributes, getter, setter and deleter, that are decorators providing useful shortcuts for adding a getter, setter or deleter function to an existing propert_<<0:>>_
++++++++ PARAGRAPH ++++++++
y_<<1:>>_You would use them like this:_<<0:>>_
++++++++ PARAGRAPH ++++++++
      class C(object):
          @property
          def x(self):
              return self._x_<<0:>>_
++++++++ PARAGRAPH ++++++++
          @x.setter
          def x(self, value):
              self._x = value_<<0:>>_
++++++++ PARAGRAPH ++++++++
          @x.deleter
          def x(self):
              del self._x_<<0:>>_
++++++++ PARAGRAPH ++++++++
      class D(C):
          @C.x.getter
          def x(self):
              return self._x * 2_<<0:>>_
++++++++ PARAGRAPH ++++++++
          @x.setter
          def x(self, value):
              self._x = value / 2_<<0:>>_
++++++++ PARAGRAPH ++++++++
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Several methods of the built-in set types now accept multiple iterables: intersection(), intersection_update(), union(), update(), difference() and difference_update()._<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> s=set('1234567890')
      >>> s.intersection('abc123', 'cdf246')  # Intersection between all inputs
      set(['2'])
      >>> s.difference('246', '789')
      set(['1', '0', '3', '5'])_<<0:>>_
++++++++ PARAGRAPH ++++++++
      (Contributed by Raymond Hettinger.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Many floating-point features were added_<<1:>>_The float() function will now turn the string nan into an IEEE 754 Not A Number value, and +inf and -inf into positive or negative infinity_<<2:>>_This works on any platform with IEEE 754 semantics_<<3:>>_(Contributed by Christian Heimes; issue 1635.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Other functions in the math module, isinf() and isnan(), return true if their floating-point argument is infinite or Not A Number_<<1:>>_(issue 1640)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Conversion functions were added to convert floating-point numbers into hexadecimal strings (issue 3008)_<<1:>>_These functions convert floats to and from a string representation without introducing rounding errors from the conversion between decimal and binary_<<2:>>_Floats have a hex() method that returns a string representation, and the float.fromhex() method converts a string back into a number:_<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> a = 3.75
      >>> a.hex()
      '0x1.e000000000000p+1'
      >>> float.fromhex('0x1.e000000000000p+1')
      3.75
      >>> b=1./3
      >>> b.hex()
      '0x1.5555555555555p-2'_<<0:>>_
++++++++ PARAGRAPH ++++++++
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      A numerical nicety: when creating a complex number from two floats on systems that support signed zeros (-0 and +0), the complex() constructor will now preserve the sign of the zero_<<1:>>_(Fixed by Mark T_<<2:>>_Dickinson; issue 1507.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Classes that inherit a __hash__() method from a parent class can set __hash__ = None to indicate that the class isnât hashable_<<1:>>_This will make hash(obj) raise a TypeError and the class will not be indicated as implementing the Hashable ABC._<<0:>>_
++++++++ PARAGRAPH ++++++++
      You should do this when youâve defined a __cmp__() or __eq__() method that compares objects by their value rather than by identity_<<1:>>_All objects have a default hash method that uses id(obj) as the hash value_<<2:>>_Thereâs no tidy way to remove the __hash__() method inherited from a parent class, so assigning None was implemented as an override_<<3:>>_At the C level, extensions can set tp_hash to PyObject_HashNotImplemented_<<4:>>_(Fixed by Nick Coghlan and Amaury Forgeot dâArc; issue 2235.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Changes to the Exception interface as dictated by PEP 352 continue to be made_<<1:>>_For 2.6, the message attribute is being deprecated in favor of the args attribute_<<2:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The GeneratorExit exception now subclasses BaseException instead of Exception_<<1:>>_This means that an exception handler that does except Exception: will not inadvertently catch GeneratorExit_<<2:>>_(Contributed by Chad Austin; issue 1537.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Generator objects now have a gi_code attribute that refers to the original code object backing the generator_<<1:>>_(Contributed by Collin Winter; issue 1473257.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The compile() built-in function now accepts keyword arguments as well as positional parameters_<<1:>>_(Contributed by Thomas Wouters; issue 1444529.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The complex() constructor now accepts strings containing parenthesized complex numbers, meaning that complex(repr(cplx)) will now round-trip values_<<1:>>_For example, complex('(3+4j)') now returns the value (3+4j)_<<2:>>_(issue 1491866)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The string translate() method now accepts None as the translation table parameter, which is treated as the identity transformation_<<1:>>_This makes it easier to carry out operations that only delete characters_<<2:>>_(Contributed by Bengt Richter and implemented by Raymond Hettinger; issue 1193128.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The built-in dir() function now checks for a __dir__() method on the objects it receives_<<1:>>_This method must return a list of strings containing the names of valid attributes for the object, and lets the object control the value that dir() produces_<<2:>>_Objects that have __getattr__() or __getattribute__() methods can use this to advertise pseudo-attributes they will honor_<<3:>>_(issue 1591665)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Instance method objects have new attributes for the object and function comprising the method; the new synonym for im_self is __self__, and im_func is also available as __func___<<1:>>_The old names are still supported in Python 2.6, but are gone in 3.0_<<2:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      An obscure change: when you use the locals() function inside a class statement, the resulting dictionary no longer returns free variables_<<1:>>_(Free variables, in this case, are variables referenced in the class statement that arenât attributes of the class.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
OptimizationsÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The warnings module has been rewritten in C_<<1:>>_This makes it possible to invoke warnings from the parser, and may also make the interpreterâs startup faster_<<2:>>_(Contributed by Neal Norwitz and Brett Cannon; issue 1631171.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Type objects now have a cache of methods that can reduce the work required to find the correct method implementation for a particular class; once cached, the interpreter doesnât need to traverse base classes to figure out the right method to call_<<1:>>_The cache is cleared if a base class or the class itself is modified, so the cache should remain correct even in the face of Pythonâs dynamic nature_<<2:>>_(Original optimization implemented by Armin Rigo, updated for Python 2.6 by Kevin Jacobs; issue 1700288.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      By default, this change is only applied to types that are included with the Python core_<<1:>>_Extension modules may not necessarily be compatible with this cache, so they must explicitly add Py_TPFLAGS_HAVE_VERSION_TAG to the moduleâs tp_flags field to enable the method cache_<<2:>>_(To be compatible with the method cache, the extension moduleâs code must not directly access and modify the tp_dict member of any of the types it implements_<<3:>>_Most modules donât do this, but itâs impossible for the Python interpreter to determine that_<<4:>>_See issue 1878 for some discussion.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Function calls that use keyword arguments are significantly faster by doing a quick pointer comparison, usually saving the time of a full string comparison_<<1:>>_(Contributed by Raymond Hettinger, after an initial implementation by Antoine Pitrou; issue 1819.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      All of the functions in the struct module have been rewritten in C, thanks to work at the Need For Speed sprint_<<1:>>_(Contributed by Raymond Hettinger.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Some of the standard built-in types now set a bit in their type objects_<<1:>>_This speeds up checking whether an object is a subclass of one of these types_<<2:>>_(Contributed by Neal Norwitz.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Unicode strings now use faster code for detecting whitespace and line breaks; this speeds up the split() method by about 25% and splitlines() by 35%_<<1:>>_(Contributed by Antoine Pitrou.) Memory usage is reduced by using pymalloc for the Unicode stringâs data_<<2:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The with statement now stores the __exit__() method on the stack, producing a small speedup_<<1:>>_(Implemented by Jeffrey Yasskin.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      To reduce memory usage, the garbage collector will now clear internal free lists when garbage-collecting the highest generation of objects_<<1:>>_This may return memory to the operating system sooner._<<0:>>_
++++++++ PARAGRAPH ++++++++
Interpreter ChangesÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
Two command-line options have been reserved for use by other Python implementations_<<1:>>_The -J switch has been reserved for use by Jython for Jython-specific options, such as switches that are passed to the underlying JVM_<<2:>>_-X has been reserved for options specific to a particular implementation of Python such as CPython, Jython, or IronPython_<<3:>>_If either option is used with Python 2.6, the interpreter will report that the option isnât currently _<<0:>>_
++++++++ PARAGRAPH ++++++++
used._<<0:>>_
++++++++ PARAGRAPH ++++++++
Python can now be prevented from writing .pyc or .pyo files by supplying the -B switch to the Python interpreter, or by setting the PYTHONDONTWRITEBYTECODE environment variable before running the interpreter_<<1:>>_This setting is available to Python programs as the sys.dont_write_bytecode variable, and Python code can change the value to modify the interpreterâs behaviour_<<2:>>_(Contributed by Neal Norwitz and Georg Brandl.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
The encoding used for standard input, output, and standard error can be specified by setting the PYTHONIOENCODING environment variable before running the interpreter_<<1:>>_The value should be a string in the form <encoding> or <encoding>:<errorhandler>_<<2:>>_The encoding part specifies the encodingâs name, e.g_<<3:>>_utf-8 or latin-1; the optional errorhandler part specifies what to do with characters that canât be handled by the encoding, and should be one of âerrorâ, âignoreâ, or âreplaceâ_<<4:>>_(Contributed by Martin von Loewis.)
New, Improved, and Deprecated ModulesÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
As in every release, Pythonâs standard library received a number of enhancements and bug fixes_<<1:>>_Hereâs a partial list of the most notable changes, sorted alphabetically by module name_<<2:>>_Consult the Misc/NEWS file in the source tree for a more complete list of changes, or look through the Subversion logs for all the details._<<0:>>_
++++++++ PARAGRAPH ++++++++
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      (3.0-warning mode) Python 3.0 will feature a reorganized standard library that will drop many outdated modules and rename others_<<1:>>_Python 2.6 running in 3.0-warning mode will warn about these modules when they are imported._<<0:>>_
++++++++ PARAGRAPH ++++++++
      The list of deprecated modules is: audiodev, bgenlocations, buildtools, bundlebuilder, Canvas, compiler, dircache, dl, fpformat, gensuitemodule, ihooks, imageop, imgfile, linuxaudiodev, mhlib, mimetools, multifile, new, pure, statvfs, sunaudiodev, test.testall, and toaiff_<<1:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The asyncore and asynchat modules are being actively maintained again, and a number of patches and bugfixes were applied_<<1:>>_(Maintained by Josiah Carlson; see issue 1736190 for one patch.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The bsddb module also has a new maintainer, JesÃºs Cea, and the package is now available as a standalone package_<<1:>>_The web page for the package is www.jcea.es/programacion/pybsddb.htm_<<2:>>_The plan is to remove the package from the standard library in Python 3.0, because its pace of releases is much more frequent than Pythonâs._<<0:>>_
++++++++ PARAGRAPH ++++++++
      The bsddb.dbshelve module now uses the highest pickling protocol available, instead of restricting itself to protocol 1_<<1:>>_(Contributed by W_<<2:>>_Barnes; issue 1551443.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The cgi module will now read variables from the query string of an HTTP POST request_<<1:>>_This makes it possible to use form actions with URLs that include query strings such as â/cgi-bin/add.py?category=1â_<<2:>>_(Contributed by Alexandre Fiori and Nubis; issue 1817.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The parse_qs() and parse_qsl() functions have been relocated from the cgi module to the urlparse module_<<1:>>_The versions still available in the cgi module will trigger PendingDeprecationWarning messages in 2.6 (issue 600362)_<<2:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The cmath module underwent extensive revision, contributed by Mark Dickinson and Christian Heimes_<<1:>>_Five new functions were added:
          o polar() converts a complex number to polar form, returning the modulus and argument of the complex number_<<2:>>_          o rect() does the opposite, turning a modulus, argument pair back into the corresponding complex number_<<3:>>_          o phase() returns the argument (also called the angle) of a complex number_<<4:>>_          o isnan() returns True if either the real or imaginary part of its argument is a NaN_<<5:>>_          o isinf() returns True if either the real or imaginary part of its argument is infinite._<<0:>>_
++++++++ PARAGRAPH ++++++++
      The revisions also improved the numerical soundness of the cmath module_<<1:>>_For all functions, the real and imaginary parts of the results are accurate to within a few units of least precision (ulps) whenever possible_<<2:>>_See issue 1381 for the details_<<3:>>_The branch cuts for asinh(), atanh(): and atan() have also been corrected._<<0:>>_
++++++++ PARAGRAPH ++++++++
      The tests for the module have been greatly expanded; nearly 2000 new test cases exercise the algebraic functions._<<0:>>_
++++++++ PARAGRAPH ++++++++
      On IEEE 754 platforms, the cmath module now handles IEEE 754 special values and floating-point exceptions in a manner consistent with Annex âGâ of the C99 standard_<<1:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      A new data type in the collections module: namedtuple(typename, fieldnames) is a factory function that creates subclasses of the standard tuple whose fields are accessible by name as well as index_<<1:>>_For example:_<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> var_type = collections.namedtuple('variable',
      .._<<1:>>_            'id name type size')
      >>> # Names are separated by spaces or commas_<<2:>>_      >>> # 'id, name, type, size' would also work_<<3:>>_      >>> var_type._fields
      ('id', 'name', 'type', 'size')_<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> var = var_type(1, 'frequency', 'int', 4)
      >>> print var[0], var.id    # Equivalent
      1 1
      >>> print var[2], var.type  # Equivalent
      int int
      >>> var._asdict()
      {'size': 4, 'type': 'int', 'id': 1, 'name': 'frequency'}
      >>> v2 = var._replace(name='amplitude')
      >>> v2
      variable(id=1, name='amplitude', type='int', size=4)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Several places in the standard library that returned tuples have been modified to return namedtuple instances_<<1:>>_For example, the Decimal.as_tuple() method now returns a named tuple with sign, digits, and exponent fields._<<0:>>_
++++++++ PARAGRAPH ++++++++
      (Contributed by Raymond Hettinger.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Another change to the collections module is that the deque type now supports an optional maxlen parameter; if supplied, the dequeâs size will be restricted to no more than maxlen items_<<1:>>_Adding more items to a full deque causes old items to be discarded._<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> from collections import deque
      >>> dq=deque(maxlen=3)
      >>> dq
      deque([], maxlen=3)
      >>> dq.append(1) ; dq.append(2) ; dq.append(3)
      >>> dq
      deque([1, 2, 3], maxlen=3)
      >>> dq.append(4)
      >>> dq
      deque([2, 3, 4], maxlen=3)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      (Contributed by Raymond Hettinger.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The Cookie moduleâs Morsel objects now support an httponly attribute_<<1:>>_In some browsers_<<2:>>_cookies with this attribute set cannot be accessed or manipulated by JavaScript code_<<3:>>_(Contributed by Arvin Schnell; issue 1638033.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      A new window method in the curses module, chgat(), changes the display attributes for a certain number of characters on a single line_<<1:>>_(Contributed by Fabian Kreutz.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      # Boldface text starting at y=0,x=21
      # and affecting the rest of the line_<<1:>>_      stdscr.chgat(0, 21, curses.A_BOLD)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The Textbox class in the curses.textpad module now supports editing in insert mode as well as overwrite mode_<<1:>>_Insert mode is enabled by supplying a true value for the insert_mode parameter when creating the Textbox instance_<<2:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The datetime moduleâs strftime() methods now support a %f format code that expands to the number of microseconds in the object, zero-padded on the left to six places_<<1:>>_(Contributed by Skip Montanaro; issue 1158.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The decimal module was updated to version 1.66 of the General Decimal Specification_<<1:>>_New features include some methods for some basic mathematical functions such as exp() and log10():_<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> Decimal(1).exp()
      Decimal("2.718281828459045235360287471")
      >>> Decimal("2.7182818").ln()
      Decimal("0.9999999895305022877376682436")
      >>> Decimal(1000).log10()
      Decimal("3")_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The as_tuple() method of Decimal objects now returns a named tuple with sign, digits, and exponent fields._<<0:>>_
++++++++ PARAGRAPH ++++++++
      (Implemented by Facundo Batista and Mark Dickinson_<<1:>>_Named tuple support added by Raymond Hettinger.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The difflib moduleâs SequenceMatcher class now returns named tuples representing matches, with a, b, and size attributes_<<1:>>_(Contributed by Raymond Hettinger.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      An optional timeout parameter, specifying a timeout measured in seconds, was added to the ftplib.FTP class constructor as well as the connect() method_<<1:>>_(Added by Facundo Batista.) Also, the FTP classâs storbinary() and storlines() now take an optional callback parameter that will be called_<<0:>>_
++++++++ PARAGRAPH ++++++++
 with each block of data after the data has been sent_<<1:>>_(Contributed by Phil Schwartz; issue 1221598.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The reduce() built-in function is also available in the functools module_<<1:>>_In Python 3.0, the built-in has been dropped and reduce() is only available from functools; currently there are no plans to drop the built-in in the 2.x series_<<2:>>_(Patched by Christian Heimes; issue 1739906.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      When possible, the getpass module will now use /dev/tty to print a prompt message and read the password, falling back to standard error and standard input_<<1:>>_If the password may be echoed to the terminal, a warning is printed before the prompt is displayed_<<2:>>_(Contributed by Gregory P_<<3:>>_Smith.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The glob.glob() function can now return Unicode filenames if a Unicode path was used and Unicode filenames are matched within the directory_<<1:>>_(issue 1001604)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The gopherlib module has been removed_<<1:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      A new function in the heapq module, merge(iter1, iter2, ...), takes any number of iterables returning data in sorted order, and returns a new generator that returns the contents of all the iterators, also in sorted order_<<1:>>_For example:_<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> list(heapq.merge([1, 3, 5, 9], [2, 8, 16]))
      [1, 2, 3, 5, 8, 9, 16]_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Another new function, heappushpop(heap, item), pushes item onto heap, then pops off and returns the smallest item_<<1:>>_This is more efficient than making a call to heappush() and then heappop()._<<0:>>_
++++++++ PARAGRAPH ++++++++
      heapq is now implemented to only use less-than comparison, instead of the less-than-or-equal comparison it previously used_<<1:>>_This makes heapqâs usage of a type match the list.sort() method_<<2:>>_(Contributed by Raymond Hettinger.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      An optional timeout parameter, specifying a timeout measured in seconds, was added to the httplib.HTTPConnection and HTTPSConnection class constructors_<<1:>>_(Added by Facundo Batista.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Most of the inspect moduleâs functions, such as getmoduleinfo() and getargs(), now return named tuples_<<1:>>_In addition to behaving like tuples, the elements of the return value can also be accessed as attributes_<<2:>>_(Contributed by Raymond Hettinger.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Some new functions in the module include isgenerator(), isgeneratorfunction(), and isabstract()_<<1:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The itertools module gained several new functions._<<0:>>_
++++++++ PARAGRAPH ++++++++
      izip_longest(iter1, iter2, ...[, fillvalue]) makes tuples from each of the elements; if some of the iterables are shorter than others, the missing values are set to fillvalue_<<1:>>_For example:_<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> tuple(itertools.izip_longest([1,2,3], [1,2,3,4,5]))
      ((1, 1), (2, 2), (3, 3), (None, 4), (None, 5))_<<0:>>_
++++++++ PARAGRAPH ++++++++
      product(iter1, iter2, ..., [repeat=N]) returns the Cartesian product of the supplied iterables, a set of tuples containing every possible combination of the elements returned from each iterable._<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> list(itertools.product([1,2,3], [4,5,6]))
      [(1, 4), (1, 5), (1, 6),
       (2, 4), (2, 5), (2, 6),
       (3, 4), (3, 5), (3, 6)]_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The optional repeat keyword argument is used for taking the product of an iterable or a set of iterables with themselves, repeated N times_<<1:>>_With a single iterable argument, N-tuples are returned:_<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> list(itertools.product([1,2], repeat=3))
      [(1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 2, 2),
       (2, 1, 1), (2, 1, 2), (2, 2, 1), (2, 2, 2)]_<<0:>>_
++++++++ PARAGRAPH ++++++++
      With two iterables, 2N-tuples are returned._<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> list(itertools.product([1,2], [3,4], repeat=2))
      [(1, 3, 1, 3), (1, 3, 1, 4), (1, 3, 2, 3), (1, 3, 2, 4),
       (1, 4, 1, 3), (1, 4, 1, 4), (1, 4, 2, 3), (1, 4, 2, 4),
       (2, 3, 1, 3), (2, 3, 1, 4), (2, 3, 2, 3), (2, 3, 2, 4),
       (2, 4, 1, 3), (2, 4, 1, 4), (2, 4, 2, 3), (2, 4, 2, 4)]_<<0:>>_
++++++++ PARAGRAPH ++++++++
      combinations(iterable, r) returns sub-sequences of length r from the elements of iterable._<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> list(itertools.combinations('123', 2))
      [('1', '2'), ('1', '3'), ('2', '3')]
      >>> list(itertools.combinations('123', 3))
      [('1', '2', '3')]
      >>> list(itertools.combinations('1234', 3))
      [('1', '2', '3'), ('1', '2', '4'),
       ('1', '3', '4'), ('2', '3', '4')]_<<0:>>_
++++++++ PARAGRAPH ++++++++
      permutations(iter[, r]) returns all the permutations of length r of the iterableâs elements_<<1:>>_If r is not specified, it will default to the number of elements produced by the iterable._<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> list(itertools.permutations([1,2,3,4], 2))
      [(1, 2), (1, 3), (1, 4),
       (2, 1), (2, 3), (2, 4),
       (3, 1), (3, 2), (3, 4),
       (4, 1), (4, 2), (4, 3)]_<<0:>>_
++++++++ PARAGRAPH ++++++++
      itertools.chain(*iterables) is an existing function in itertools that gained a new constructor in Python 2.6_<<1:>>_itertools.chain.from_iterable(iterable) takes a single iterable that should return other iterables_<<2:>>_chain() will then return all the elements of the first iterable, then all the elements of the second, and so on._<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> list(itertools.chain.from_iterable([[1,2,3], [4,5,6]]))
      [1, 2, 3, 4, 5, 6]_<<0:>>_
++++++++ PARAGRAPH ++++++++
      (All contributed by Raymond Hettinger.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The logging moduleâs FileHandler class and its subclasses WatchedFileHandler, RotatingFileHandler, and TimedRotatingFileHandler now have an optional delay parameter to their constructors_<<1:>>_If delay is true, opening of the log file is deferred until the first emit() call is made_<<2:>>_(Contributed by Vinay Sajip.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      TimedRotatingFileHandler also has a utc constructor parameter_<<1:>>_If the argument is true, UTC time will be used in determining when midnight occurs and in generating filenames; otherwise local time will be used_<<2:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Several new functions were added to the math module:
          o isinf() and isnan() determine whether a given float is a (positive or negative) infinity or a NaN (Not a Number), respectively_<<1:>>_          o copysign() copies the sign bit of an IEEE 754 number, returning the absolute value of x combined with the sign bit of y_<<2:>>_For example, math.copysign(1, -0.0) returns -1.0_<<3:>>_(Contributed by Christian Heimes.)
          o factorial() computes the factorial of a number_<<4:>>_(Contributed by Raymond Hettinger; issue 2138.)
          o fsum() adds up the stream of numbers from an iterable, and is careful to avoid loss of precision through using partial sums_<<5:>>_(Contributed by Jean Brouwers, Raymond Hettinger, and Mark Dickinson; issue 2819.)
          o acosh(), asinh() and atanh() compute the inverse hyperbolic functions_<<6:>>_          o log1p() returns the natural logarithm of 1+x (base e)_<<7:>>_          o trunc() rounds a number toward zero, returning the closest Integral thatâs between the functionâs argument and zero_<<8:>>_Added as part of the backport of PEP 3141âs type hierarchy for numbers_<<9:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The math module has been improved to give more consistent behaviour across platforms, especially with respect to handling of floating-point exceptions and IEEE 754 special values._<<0:>>_
++++++++ PARAGRAPH ++++++++
      Whenever possible, the module follows the recommendations of the C99 standard about 754âs special values_<<1:>>_For example, sqrt(-1.) should now give a ValueError across almost all platforms, while sqrt(float('NaN')) should return a NaN on all IEEE 754 platforms_<<2:>>_Where Annex âFâ of the C99 standard recommends signaling âdivide-by-zeroâ or âinvalidâ, Python will raise ValueError_<<3:>>_Where Annex âFâ of the C99 standard recommends signaling âoverflowâ, Python will raise OverflowError_<<4:>>_(See issue 711019 and issue 1640.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      (Contributed by Christian Heimes and Mark Dickinson.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The MimeWriter module and mimify module have been deprecated; use the email package instead_<<1:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The md5 module has been deprecated; use the hashlib module instead_<<1:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      mmap objects now have a rfind() method that searches for a substring beginning at the end of the string and searching backwards_<<1:>>_The find() method also gained an end parameter giving an index at which to stop searching_<<2:>>_(Contributed by John Lenton.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The operator module gained a methodcaller() function that takes a name and an optional set of arguments, returning a callable that will call the named function on any arguments passed to it_<<1:>>_For example:_<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> # Equivalent to lambda s: s.replace('old', 'new')
      >>> replacer = operator.methodcaller('replace', 'old', 'new')
      >>> replacer('old w_<<0:>>_
++++++++ PARAGRAPH ++++++++
ine in old bottles')
      'new wine in new bottles'_<<0:>>_
++++++++ PARAGRAPH ++++++++
      (Contributed by Georg Brandl, after a suggestion by Gregory Petrosyan.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The attrgetter() function now accepts dotted names and performs the corresponding attribute lookups:_<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> inst_name = operator.attrgetter(
      .._<<1:>>_       '__class__.__name__')
      >>> inst_name('')
      'str'
      >>> inst_name(help)
      '_Helper'_<<0:>>_
++++++++ PARAGRAPH ++++++++
      (Contributed by Georg Brandl, after a suggestion by Barry Warsaw.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The os module now wraps several new system calls_<<1:>>_fchmod(fd, mode) and fchown(fd, uid, gid) change the mode and ownership of an opened file, and lchmod(path, mode) changes the mode of a symlink_<<2:>>_(Contributed by Georg Brandl and Christian Heimes.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      chflags() and lchflags() are wrappers for the corresponding system calls (where theyâre available), changing the flags set on a file_<<1:>>_Constants for the flag values are defined in the stat module; some possible values include UF_IMMUTABLE to signal the file may not be changed and UF_APPEND to indicate that data can only be appended to the file_<<2:>>_(Contributed by M_<<3:>>_Levinson.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      os.closerange(low, high) efficiently closes all file descriptors from low to high, ignoring any errors and not including high itself_<<1:>>_This function is now used by the subprocess module to make starting processes faster_<<2:>>_(Contributed by Georg Brandl; issue 1663329.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The os.environ objectâs clear() method will now unset the environment variables using os.unsetenv() in addition to clearing the objectâs keys_<<1:>>_(Contributed by Martin Horcicka; issue 1181.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The os.walk() function now has a followlinks parameter_<<1:>>_If set to True, it will follow symlinks pointing to directories and visit the directoryâs contents_<<2:>>_For backward compatibility, the parameterâs default value is false_<<3:>>_Note that the function can fall into an infinite recursion if thereâs a symlink that points to a parent directory_<<4:>>_(issue 1273829)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      In the os.path module, the splitext() function has been changed to not split on leading period characters_<<1:>>_This produces better results when operating on Unixâs dot-files_<<2:>>_For example, os.path.splitext('.ipython') now returns ('.ipython', '') instead of ('', '.ipython')_<<3:>>_(issue 115886)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      A new function, os.path.relpath(path, start='.'), returns a relative path from the start path, if itâs supplied, or from the current working directory to the destination path_<<1:>>_(Contributed by Richard Barran; issue 1339796.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      On Windows, os.path.expandvars() will now expand environment variables given in the form â%var%â, and â~userâ will be expanded into the userâs home directory path_<<1:>>_(Contributed by Josiah Carlson; issue 957650.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The Python debugger provided by the pdb module gained a new command: ârunâ restarts the Python program being debugged and can optionally take new command-line arguments for the program_<<1:>>_(Contributed by Rocky Bernstein; issue 1393667.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The posixfile module has been deprecated; fcntl.lockf() provides better locking._<<0:>>_
++++++++ PARAGRAPH ++++++++
      The post_mortem() function, used to begin debugging a traceback, will now use the traceback returned by sys.exc_info() if no traceback is supplied_<<1:>>_(Contributed by Facundo Batista; issue 1106316.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The pickletools module now has an optimize() function that takes a string containing a pickle and removes some unused opcodes, returning a shorter pickle that contains the same data structure_<<1:>>_(Contributed by Raymond Hettinger.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The popen2 module has been deprecated; use the subprocess module_<<1:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      A get_data() function was added to the pkgutil module that returns the contents of resource files included with an installed Python package_<<1:>>_For example:_<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> import pkgutil
      >>> print pkgutil.get_data('test', 'exception_hierarchy.txt')
      BaseException
       +-- SystemExit
       +-- KeyboardInterrupt
       +-- GeneratorExit
       +-- Exception
            +-- StopIteration
            +-- StandardError
       ..._<<0:>>_
++++++++ PARAGRAPH ++++++++
      (Contributed by Paul Moore; issue 2439.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The pyexpat moduleâs Parser objects now allow setting their buffer_size attribute to change the size of the buffer used to hold character data_<<1:>>_(Contributed by Achim Gaedke; issue 1137.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The Queue module now provides queue variants that retrieve entries in different orders_<<1:>>_The PriorityQueue class stores queued items in a heap and retrieves them in priority order, and LifoQueue retrieves the most recently added entries first, meaning that it behaves like a stack_<<2:>>_(Contributed by Raymond Hettinger.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The random moduleâs Random objects can now be pickled on a 32-bit system and unpickled on a 64-bit system, and vice versa_<<1:>>_Unfortunately, this change also means that Python 2.6âs Random objects canât be unpickled correctly on earlier versions of Python_<<2:>>_(Contributed by Shawn Ligocki; issue 1727780.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The new triangular(low, high, mode) function returns random numbers following a triangular distribution_<<1:>>_The returned values are between low and high, not including high itself, and with mode as the most frequently occurring value in the distribution_<<2:>>_(Contributed by Wladmir van der Laan and Raymond Hettinger; issue 1681432.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Long regular expression searches carried out by the re module will check for signals being delivered, so time-consuming searches can now be interrupted_<<1:>>_(Contributed by Josh Hoyt and Ralf Schmitt; issue 846388.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The regular expression module is implemented by compiling bytecodes for a tiny regex-specific virtual machine_<<1:>>_Untrusted code could create malicious strings of bytecode directly and cause crashes, so Python 2.6 includes a verifier for the regex bytecode_<<2:>>_(Contributed by Guido van Rossum from work for Google App Engine; issue 3487.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The rgbimg module has been removed_<<1:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The rlcompleter moduleâs Completer.complete() method will now ignore exceptions triggered while evaluating a name_<<1:>>_(Fixed by Lorenz Quack; issue 2250.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The sched moduleâs scheduler instances now have a read-only queue attribute that returns the contents of the schedulerâs queue, represented as a list of named tuples with the fields (time, priority, action, argument)_<<1:>>_(Contributed by Raymond Hettinger; issue 1861.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The select module now has wrapper functions for the Linux epoll and BSD kqueue system calls_<<1:>>_modify() method was added to the existing poll objects; pollobj.modify(fd, eventmask) takes a file descriptor or file object and an event mask, modifying the recorded event mask for that file_<<2:>>_(Contributed by Christian Heimes; issue 1657.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The sets module has been deprecated; itâs better to use the built-in set and frozenset types_<<1:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The sha module has been deprecated; use the hashlib module instead_<<1:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The shutil.copytree() function now has an optional ignore argument that takes a callable object_<<1:>>_This callable will receive each directory path and a list of the directoryâs contents, and returns a list of names that will be ignored, not copied._<<0:>>_
++++++++ PARAGRAPH ++++++++
      The shutil module also provides an ignore_patterns() function for use with this new parameter_<<1:>>_ignore_patterns() takes an arbitrary number of glob-style patterns and returns a callable that will ignore any files and directories that match any of these patterns_<<2:>>_The following example copies a directory tree, but skips both .svn directories and Emacs backup files, which have names ending with â~â:_<<0:>>_
++++++++ PARAGRAPH ++++++++
      shutil.copytree('Doc/library', '/tmp/library',
                      ignore=shutil.ignore_patterns('*~', '.svn'))_<<0:>>_
++++++++ PARAGRAPH ++++++++
      (Contributed by Tarek ZiadÃ©; issue 2663.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Integrating signal handling with GUI handling event loops like those used by Tkinter or GTk+ has long been a problem; most software ends up polling, waking up every fraction of a second to check if any GUI events have occurred_<<1:>>_The signal module can now make this more efficient_<<2:>>_Calling signal.set_wakeup_fd(fd) sets a file descriptor to be used; when a signal is received, a byte is written to that file descriptor_<<3:>>_Thereâs also a C-level fu_<<0:>>_
++++++++ PARAGRAPH ++++++++
nction, PySignal_SetWakeupFd, for setting the descriptor._<<0:>>_
++++++++ PARAGRAPH ++++++++
      Event loops will use this by opening a pipe to create two descriptors, one for reading and one for writing_<<1:>>_The writable descriptor will be passed to set_wakeup_fd(), and the readable descriptor will be added to the list of descriptors monitored by the event loop via select or poll_<<2:>>_On receiving a signal, a byte will be written and the main event loop will be woken up, avoiding the need to poll._<<0:>>_
++++++++ PARAGRAPH ++++++++
      (Contributed by Adam Olsen; issue 1583.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The siginterrupt() function is now available from Python code, and allows changing whether signals can interrupt system calls or not_<<1:>>_(Contributed by Ralf Schmitt.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The setitimer() and getitimer() functions have also been added (where theyâre available)_<<1:>>_setitimer() allows setting interval timers that will cause a signal to be delivered to the process after a specified time, measured in wall-clock time, consumed process time, or combined process+system time_<<2:>>_(Contributed by Guilherme Polo; issue 2240.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The smtplib module now supports SMTP over SSL thanks to the addition of the SMTP_SSL class_<<1:>>_This class supports an interface identical to the existing SMTP class_<<2:>>_(Contributed by Monty Taylor.) Both class constructors also have an optional timeout parameter that specifies a timeout for the initial connection attempt, measured in seconds_<<3:>>_(Contributed by Facundo Batista.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      An implementation of the LMTP protocol (RFC 2033) was also added to the module_<<1:>>_LMTP is used in place of SMTP when transferring e-mail between agents that donât manage a mail queue_<<2:>>_(LMTP implemented by Leif Hedstrom; issue 957003.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      SMTP.starttls() now complies with RFC 3207 and forgets any knowledge obtained from the server not obtained from the TLS negotiation itself_<<1:>>_(Patch contributed by Bill Fenner; issue 829951.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The socket module now supports TIPC (http://tipc.sf.net), a high-performance non-IP-based protocol designed for use in clustered environments_<<1:>>_TIPC addresses are 4- or 5-tuples_<<2:>>_(Contributed by Alberto Bertogli; issue 1646.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      A new function, create_connection(), takes an address and connects to it using an optional timeout value, returning the connected socket object_<<1:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The base classes in the SocketServer module now support calling a handle_timeout() method after a span of inactivity specified by the serverâs timeout attribute_<<1:>>_(Contributed by Michael Pomraning.) The serve_forever() method now takes an optional poll interval measured in seconds, controlling how often the server will check for a shutdown request_<<2:>>_(Contributed by Pedro Werneck and Jeffrey Yasskin; issue 742598, issue 1193577.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The sqlite3 module, maintained by Gerhard Haering, has been updated from version 2.3.2 in Python 2.5 to version 2.4.1_<<1:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The struct module now supports the C99 _Bool type, using the format character '?'_<<1:>>_(Contributed by David Remahl.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The Popen objects provided by the subprocess module now have terminate(), kill(), and send_signal() methods_<<1:>>_On Windows, send_signal() only supports the SIGTERM signal, and all these methods are aliases for the Win32 API function TerminateProcess_<<2:>>_(Contributed by Christian Heimes.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      A new variable in the sys module, float_info, is an object containing information derived from the float.h file about the platformâs floating-point support_<<1:>>_Attributes of this object include mant_dig (number of digits in the mantissa), epsilon (smallest difference between 1.0 and the next largest value representable), and several others_<<2:>>_(Contributed by Christian Heimes; issue 1534.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Another new variable, dont_write_bytecode, controls whether Python writes any .pyc or .pyo files on importing a module_<<1:>>_If this variable is true, the compiled files are not written_<<2:>>_The variable is initially set on start-up by supplying the -B switch to the Python interpreter, or by setting the PYTHONDONTWRITEBYTECODE environment variable before running the interpreter_<<3:>>_Python code can subsequently change the value of this variable to control whether bytecode files are written or not_<<4:>>_(Contributed by Neal Norwitz and Georg Brandl.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Information about the command-line arguments supplied to the Python interpreter is available by reading attributes of a named tuple available as sys.flags_<<1:>>_For example, the verbose attribute is true if Python was executed in verbose mode, debug is true in debugging mode, etc_<<2:>>_These attributes are all read-only_<<3:>>_(Contributed by Christian Heimes.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      A new function, getsizeof(), takes a Python object and returns the amount of memory used by the object, measured in bytes_<<1:>>_Built-in objects return correct results; third-party extensions may not, but can define a __sizeof__() method to return the objectâs size_<<2:>>_(Contributed by Robert Schuppenies; issue 2898.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Itâs now possible to determine the current profiler and tracer functions by calling sys.getprofile() and sys.gettrace()_<<1:>>_(Contributed by Georg Brandl; issue 1648.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The tarfile module now supports POSIX.1-2001 (pax) tarfiles in addition to the POSIX.1-1988 (ustar) and GNU tar formats that were already supported_<<1:>>_The default format is GNU tar; specify the format parameter to open a file using a different format:_<<0:>>_
++++++++ PARAGRAPH ++++++++
      tar = tarfile.open("output.tar", "w",
                         format=tarfile.PAX_FORMAT)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The new encoding and errors parameters specify an encoding and an error handling scheme for character conversions_<<1:>>_'strict', 'ignore', and 'replace' are the three standard ways Python can handle errors,; 'utf-8' is a special value that replaces bad characters with their UTF-8 representation_<<2:>>_(Character conversions occur because the PAX format supports Unicode filenames, defaulting to UTF-8 encoding.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The TarFile.add() method now accepts an exclude argument thatâs a function that can be used to exclude certain filenames from an archive_<<1:>>_The function must take a filename and return true if the file should be excluded or false if it should be archived_<<2:>>_The function is applied to both the name initially passed to add() and to the names of files in recursively-added directories._<<0:>>_
++++++++ PARAGRAPH ++++++++
      (All changes contributed by Lars GustÃ¤bel)_<<1:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      An optional timeout parameter was added to the telnetlib.Telnet class constructor, specifying a timeout measured in seconds_<<1:>>_(Added by Facundo Batista.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The tempfile.NamedTemporaryFile class usually deletes the temporary file it created when the file is closed_<<1:>>_This behaviour can now be changed by passing delete=False to the constructor_<<2:>>_(Contributed by Damien Miller; issue 1537850.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      A new class, SpooledTemporaryFile, behaves like a temporary file but stores its data in memory until a maximum size is exceeded_<<1:>>_On reaching that limit, the contents will be written to an on-disk temporary file_<<2:>>_(Contributed by Dustin J_<<3:>>_Mitchell.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The NamedTemporaryFile and SpooledTemporaryFile classes both work as context managers, so you can write with tempfile.NamedTemporaryFile() as tmp: ..._<<1:>>_(Contributed by Alexander Belopolsky; issue 2021.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The test.test_support module gained a number of context managers useful for writing tests_<<1:>>_EnvironmentVarGuard() is a context manager that temporarily changes environment variables and automatically restores them to their old values._<<0:>>_
++++++++ PARAGRAPH ++++++++
      Another context manager, TransientResource, can surround calls to resources that may or may not be available; it will catch and ignore a specified list of exceptions_<<1:>>_For example, a network test may ignore certain failures when connecting to an external web site:_<<0:>>_
++++++++ PARAGRAPH ++++++++
      with test_support.TransientResource(IOError,
                                      errno=errno.ETIMEDOUT):
          f = urllib.urlopen('https://sf.net')
          ..._<<0:>>_
++++++++ PARAGRAPH ++++++++
      Finally, check_warnings() resets the warning moduleâs warning filters and returns an object that will record all warning messages triggered (issue 3781):_<<0:>>_
++++++++ PARAGRAPH ++++++++
      with test_support.check_warnings() as wrec:
          warnings.simplefilter("always")
          # .._<<1:>>_code that triggers a warning .._<<2:>>_          assert str(wrec.message) == "function is out_<<0:>>_
++++++++ PARAGRAPH ++++++++
dated"
          assert len(wrec.warnings) == 1, "Multiple warnings raised"_<<0:>>_
++++++++ PARAGRAPH ++++++++
      (Contributed by Brett Cannon.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The textwrap module can now preserve existing whitespace at the beginnings and ends of the newly-created lines by specifying drop_whitespace=False as an argument:_<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> S = """This  sentence  has a bunch   of
      .._<<1:>>_  extra   whitespace."""
      >>> print textwrap.fill(S, width=15)
      This  sentence
      has a bunch
      of    extra
      whitespace_<<2:>>_      >>> print textwrap.fill(S, drop_whitespace=False, width=15)
      This  sentence
        has a bunch
         of    extra
         whitespace_<<3:>>_      >>>_<<0:>>_
++++++++ PARAGRAPH ++++++++
      (Contributed by Dwayne Bailey; issue 1581073.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The threading module API is being changed to use properties such as daemon instead of setDaemon() and isDaemon() methods, and some methods have been renamed to use underscores instead of camel-case; for example, the activeCount() method is renamed to active_count()_<<1:>>_Both the 2.6 and 3.0 versions of the module support the same properties and renamed methods, but donât remove the old methods_<<2:>>_No date has been set for the deprecation of the old APIs in Python 3.x; the old APIs wonât be removed in any 2.x version_<<3:>>_(Carried out by several people, most notably Benjamin Peterson.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The threading moduleâs Thread objects gained an ident property that returns the threadâs identifier, a nonzero integer_<<1:>>_(Contributed by Gregory P_<<2:>>_Smith; issue 2871.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The timeit module now accepts callables as well as strings for the statement being timed and for the setup code_<<1:>>_Two convenience functions were added for creating Timer instances: repeat(stmt, setup, time, repeat, number) and timeit(stmt, setup, time, number) create an instance and call the corresponding method_<<2:>>_(Contributed by Erik Demaine; issue 1533909.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The Tkinter module now accepts lists and tuples for options, separating the elements by spaces before passing the resulting value to Tcl/Tk_<<1:>>_(Contributed by Guilherme Polo; issue 2906.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The turtle module for turtle graphics was greatly enhanced by Gregor Lingl_<<1:>>_New features in the module include:
          o Better animation of turtle movement and rotation_<<2:>>_          o Control over turtle movement using the new delay(), tracer(), and speed() methods_<<3:>>_          o The ability to set new shapes for the turtle, and to define a new coordinate system_<<4:>>_          o Turtles now have an undo() method that can roll back actions_<<5:>>_          o Simple support for reacting to input events such as mouse and keyboard activity, making it possible to write simple games_<<6:>>_          o A turtle.cfg file can be used to customize the starting appearance of the turtleâs screen_<<7:>>_          o The moduleâs docstrings can be replaced by new docstrings that have been translated into another language._<<0:>>_
++++++++ PARAGRAPH ++++++++
      (issue 1513695)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      An optional timeout parameter was added to the urllib.urlopen() function and the urllib.ftpwrapper class constructor, as well as the urllib2.urlopen() function_<<1:>>_The parameter specifies a timeout measured in seconds_<<2:>>_For example:_<<0:>>_
++++++++ PARAGRAPH ++++++++
      >>> u = urllib2.urlopen("http://slow.example.com",
                              timeout=3)
      Traceback (most recent call last):
        .._<<1:>>_      urllib2.URLError: <urlopen error timed out>
      >>>_<<0:>>_
++++++++ PARAGRAPH ++++++++
      (Added by Facundo Batista.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The Unicode database provided by the unicodedata module has been updated to version 5.1.0_<<1:>>_(Updated by Martin von Loewis; issue 3811.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The warnings moduleâs formatwarning() and showwarning() gained an optional line argument that can be used to supply the line of source code_<<1:>>_(Added as part of issue 1631171, which re-implemented part of the warnings module in C code.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      A new function, catch_warnings(), is a context manager intended for testing purposes that lets you temporarily modify the warning filters and then restore their original values (issue 3781)_<<1:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The XML-RPC SimpleXMLRPCServer and DocXMLRPCServer classes can now be prevented from immediately opening and binding to their socket by passing True as the bind_and_activate constructor parameter_<<1:>>_This can be used to modify the instanceâs allow_reuse_address attribute before calling the server_bind() and server_activate() methods to open the socket and begin listening for connections_<<2:>>_(Contributed by Peter Parente; issue 1599845.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      SimpleXMLRPCServer also has a _send_traceback_header attribute; if true, the exception and formatted traceback are returned as HTTP headers âX-Exceptionâ and âX-Tracebackâ_<<1:>>_This feature is for debugging purposes only and should not be used on production servers because the tracebacks might reveal passwords or other sensitive information_<<2:>>_(Contributed by Alan McIntyre as part of his project for Googleâs Summer of Code 2007.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The xmlrpclib module no longer automatically converts datetime.date and datetime.time to the xmlrpclib.DateTime type; the conversion semantics were not necessarily correct for all applications_<<1:>>_Code using xmlrpclib should convert date and time instances_<<2:>>_(issue 1330538) The code can also handle dates before 1900 (contributed by Ralf Schmitt; issue 2014) and 64-bit integers represented by using <i8> in XML-RPC responses (contributed by Riku Lindblad; issue 2985)_<<3:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The zipfile moduleâs ZipFile class now has extract() and extractall() methods that will unpack a single file or all the files in the archive to the current directory, or to a specified directory:_<<0:>>_
++++++++ PARAGRAPH ++++++++
      z = zipfile.ZipFile('python-251.zip')_<<0:>>_
++++++++ PARAGRAPH ++++++++
      # Unpack a single file, writing it relative
      # to the /tmp directory_<<1:>>_      z.extract('Python/sysmodule.c', '/tmp')_<<0:>>_
++++++++ PARAGRAPH ++++++++
      # Unpack all the files in the archive_<<1:>>_      z.extractall()_<<0:>>_
++++++++ PARAGRAPH ++++++++
      (Contributed by Alan McIntyre; issue 467924.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The open(), read() and extract() methods can now take either a filename or a ZipInfo object_<<1:>>_This is useful when an archive accidentally contains a duplicated filename_<<2:>>_(Contributed by Graham Horler; issue 1775025.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Finally, zipfile now supports using Unicode filenames for archived files_<<1:>>_(Contributed by Alexey Borzenkov; issue 1734346.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
The ast moduleÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
The ast module provides an Abstract Syntax Tree representation of Python code, and Armin Ronacher contributed a set of helper functions that perform a variety of common tasks_<<1:>>_These will be useful for HTML templating packages, code analyzers, and similar tools that process Python code._<<0:>>_
++++++++ PARAGRAPH ++++++++
The parse() function takes an expression and returns an AST_<<1:>>_The dump() function outputs a representation of a tree, suitable for debugging:_<<0:>>_
++++++++ PARAGRAPH ++++++++
import ast_<<0:>>_
++++++++ PARAGRAPH ++++++++
t = ast.parse("""
d = {}
for i in 'abcdefghijklm':
    d[i + i] = ord(i) - ord('a') + 1
print d
""")
print ast.dump(t)_<<0:>>_
++++++++ PARAGRAPH ++++++++
This outputs a deeply nested tree:_<<0:>>_
++++++++ PARAGRAPH ++++++++
Module(body=[
  Assign(targets=[
    Name(id='d', ctx=Store())
   ], value=Dict(keys=[], values=[]))
  For(target=Name(id='i', ctx=Store()),
      iter=Str(s='abcdefghijklm'), body=[
    Assign(targets=[
      Subscript(value=
        Name(id='d', ctx=Load()),
          slice=
          Index(value=
            BinOp(left=Name(id='i', ctx=Load()), op=Add(),
             right=Name(id='i', ctx=Load()))), ctx=Store())
     ], value=
     BinOp(left=
      BinOp(left=
       Call(func=
        Name(id='ord', ctx=Load()), args=[
          Name(id='i', ctx=Load())
         ], keywords=[], starargs=None, kwargs=None),
       op=Sub(), right=Call(func=
        Name(id='ord', ctx=Load()), args=[
          Str(s='a')
         ], keywords=[], starargs=None, kwargs=None)),
       op=Add(), right=Num(n=1)))
    ], orelse=[])
   Print(dest=None, values=[
     Name(id='d', ctx=Load())
   ], nl=True)
 ])_<<0:>>_
++++++++ PARAGRAPH ++++++++
The literal_eval() method takes a string or an AST representing a literal expression, parses and evaluates it, and returns the resulting value_<<1:>>_A literal expression is a Python expression containing only strings, numbers, dictionaries, etc_<<2:>>_but no statements or function calls_<<3:>>_If you need to evaluate an expression but cannot accept the security risk of using an eval() call, literal_eval() will handle it safely:_<<0:>>_
++++++++ PARAGRAPH ++++++++
>>> literal = '("a", "b", {2:4, 3:8, 1:2})'
>_<<0:>>_
++++++++ PARAGRAPH ++++++++
>> print ast.literal_eval(literal)
('a', 'b', {1: 2, 2: 4, 3: 8})
>>> print ast.literal_eval('"a" + "b"')
Traceback (most recent call last):
  .._<<1:>>_ValueError: malformed string_<<0:>>_
++++++++ PARAGRAPH ++++++++
The module also includes NodeVisitor and NodeTransformer classes for traversing and modifying an AST, and functions for common transformations such as changing line numbers_<<1:>>_The future_builtins moduleÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
Python 3.0 makes many changes to the repertoire of built-in functions, and most of the changes canât be introduced in the Python 2.x series because they would break compatibility_<<1:>>_The future_builtins module provides versions of these built-in functions that can be imported when writing 3.0-compatible code._<<0:>>_
++++++++ PARAGRAPH ++++++++
The functions in this module currently include:_<<0:>>_
++++++++ PARAGRAPH ++++++++
    * ascii(obj): equivalent to repr()_<<1:>>_In Python 3.0, repr() will return a Unicode string, while ascii() will return a pure ASCII bytestring_<<2:>>_    * filter(predicate, iterable), map(func, iterable1, ...): the 3.0 versions return iterators, unlike the 2.x built-ins which return lists_<<3:>>_    * hex(value), oct(value): instead of calling the __hex__() or __oct__() methods, these versions will call the __index__() method and convert the result to hexadecimal or octal_<<4:>>_oct() will use the new 0o notation for its result._<<0:>>_
++++++++ PARAGRAPH ++++++++
The json module: JavaScript Object NotationÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
The new json module supports the encoding and decoding of Python types in JSON (Javascript Object Notation)_<<1:>>_JSON is a lightweight interchange format often used in web applications_<<2:>>_For more information about JSON, see http://www.json.org._<<0:>>_
++++++++ PARAGRAPH ++++++++
json comes with support for decoding and encoding most builtin Python types_<<1:>>_The following example encodes and decodes a dictionary:_<<0:>>_
++++++++ PARAGRAPH ++++++++
>>> import json
>>> data = {"spam" : "foo", "parrot" : 42}
>>> in_json = json.dumps(data) # Encode the data
>>> in_json
'{"parrot": 42, "spam": "foo"}'
>>> json.loads(in_json) # Decode into a Python object
{"spam" : "foo", "parrot" : 42}_<<0:>>_
++++++++ PARAGRAPH ++++++++
Itâs also possible to write your own decoders and encoders to support more types_<<1:>>_Pretty-printing of the JSON strings is also supported._<<0:>>_
++++++++ PARAGRAPH ++++++++
json (originally called simplejson) was written by Bob Ippolito_<<1:>>_The plistlib module: A Property-List ParserÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
The .plist format is commonly used on Mac OS X to store basic data types (numbers, strings, lists, and dictionaries) by serializing them into an XML-based format_<<1:>>_It resembles the XML-RPC serialization of data types._<<0:>>_
++++++++ PARAGRAPH ++++++++
Despite being primarily used on Mac OS X, the format has nothing Mac-specific about it and the Python implementation works on any platform that Python supports, so the plistlib module has been promoted to the standard library._<<0:>>_
++++++++ PARAGRAPH ++++++++
Using the module is simple:_<<0:>>_
++++++++ PARAGRAPH ++++++++
import sys
import plistlib
import datetime_<<0:>>_
++++++++ PARAGRAPH ++++++++
# Create data structure
data_struct = dict(lastAccessed=datetime.datetime.now(),
                   version=1,
                   categories=('Personal','Shared','Private'))_<<0:>>_
++++++++ PARAGRAPH ++++++++
# Create string containing XML_<<1:>>_plist_str = plistlib.writePlistToString(data_struct)
new_struct = plistlib.readPlistFromString(plist_str)
print data_struct
print new_struct_<<0:>>_
++++++++ PARAGRAPH ++++++++
# Write data structure to a file and read it back_<<1:>>_plistlib.writePlist(data_struct, '/tmp/customizations.plist')
new_struct = plistlib.readPlist('/tmp/customizations.plist')_<<0:>>_
++++++++ PARAGRAPH ++++++++
# read/writePlist accepts file-like objects as well as paths_<<1:>>_plistlib.writePlist(data_struct, sys.stdout)_<<0:>>_
++++++++ PARAGRAPH ++++++++
ctypes EnhancementsÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
Thomas Heller continued to maintain and enhance the ctypes module._<<0:>>_
++++++++ PARAGRAPH ++++++++
ctypes now supports a c_bool datatype that represents the C99 bool type_<<1:>>_(Contributed by David Remahl; issue 1649190.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
The ctypes string, buffer and array types have improved support for extended slicing syntax, where various combinations of (start, stop, step) are supplied_<<1:>>_(Implemented by Thomas Wouters.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
All ctypes data types now support from_buffer() and from_buffer_copy() methods that create a ctypes instance based on a provided buffer object_<<1:>>_from_buffer_copy() copies the contents of the object, while from_buffer() will share the same memory area._<<0:>>_
++++++++ PARAGRAPH ++++++++
A new calling convention tells ctypes to clear the errno or Win32 LastError variables at the outset of each wrapped call_<<1:>>_(Implemented by Thomas Heller; issue 1798.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
You can now retrieve the Unix errno variable after a function call_<<1:>>_When creating a wrapped function, you can supply use_errno=True as a keyword parameter to the DLL() function and then call the module-level methods set_errno() and get_errno() to set and retrieve the error value._<<0:>>_
++++++++ PARAGRAPH ++++++++
The Win32 LastError variable is similarly supported by the DLL(), OleDLL(), and WinDLL() functions_<<1:>>_You supply use_last_error=True as a keyword parameter and then call the module-level methods set_last_error() and get_last_error()._<<0:>>_
++++++++ PARAGRAPH ++++++++
The byref() function, used to retrieve a pointer to a ctypes instance, now has an optional offset parameter that is a byte count that will be added to the returned pointer_<<1:>>_Improved SSL SupportÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
Bill Janssen made extensive improvements to Python 2.6âs support for the Secure Sockets Layer by adding a new module, ssl, thatâs built atop the OpenSSL library_<<1:>>_This new module provides more control over the protocol negotiated, the X.509 certificates used, and has better support for writing SSL servers (as opposed to clients) in Python_<<2:>>_The existing SSL support in the socket module hasnât been removed and continues to work, though it will be removed in Python 3.0._<<0:>>_
++++++++ PARAGRAPH ++++++++
To use the new module, you must first create a TCP connection in the usual way and then pass it to the ssl.wrap_socket() function_<<1:>>_Itâs possible to specify whether a certificate is required, and to obtain certificate info by calling the getpeercert() method._<<0:>>_
++++++++ PARAGRAPH ++++++++
See also_<<0:>>_
++++++++ PARAGRAPH ++++++++
The documentation for the ssl module_<<1:>>_Build and C API ChangesÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
Changes to Pythonâs build process and to the C API include:_<<0:>>_
++++++++ PARAGRAPH ++++++++
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Python now must be compiled with C89 compilers (after 19 years!)_<<1:>>_This means that the Python source tree has dropped its own implementations of memmove and strerror, which are in the C89 standard library_<<2:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Python 2.6 can be built with Microsoft Visual Studio 2008 (version 9.0), and this is the new default compiler_<<1:>>_See the PCbuild directory for the build files_<<2:>>_(Implemented by Christian Heimes.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      On Mac OS X, Python 2.6 can be compiled as a 4-way universal build_<<1:>>_The configure script can take a --with-universal-archs=[32-bit|64-bit|all] switch, controlling whether the binaries are built for 32-bit architectures (x86, PowerPC), 64-bit (x86-64 and PPC-64), or both_<<2:>>_(Contributed by Ronald Oussoren.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The BerkeleyDB module now has a C API object, available as bsddb.db.api_<<1:>>_This object can be used by other C extensions that wish to use the bsddb module for their own purposes_<<2:>>_(Contributed by Duncan Grisby; issue 1551895.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The new buffer interface, previously described in the PEP 3118 section, adds PyObject_GetBuffer and PyBuffer_Release, as well as a few other functions_<<1:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Pythonâs use of the C stdio library is now thread-safe, or at least as thread-safe as the underlying library is_<<1:>>_A long-standing potential bug occurred if one thread closed a file object while another thread was reading from or writing to the object_<<2:>>_In 2.6 file objects have a reference count, manipulated by the PyFile_IncUseCount and PyFile_DecUseCount functions_<<3:>>_File objects canât be closed unless the reference count is zero_<<4:>>_PyFile_IncUseCount should be called while the GIL is still held, before carrying out an I/O operation using the FILE * pointer, and PyFile_DecUseCount should be called immediately after the GIL is re-acquired_<<5:>>_(Contributed by Antoine Pitrou and Gregory P_<<6:>>_Smith.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Importing modules simultaneously in two different threads no longer deadlocks; it will now raise an ImportError_<<1:>>_A new API function, PyImport_ImportModuleNoBlock, will look for a module in sys.modules first, then try to import it after acquiring an import lock_<<2:>>_If the import lock is held by another thread, an ImportError is raised_<<3:>>_(Contributed by Christian Heimes.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Several functions return information about the platformâs floating-point support_<<1:>>_PyFloat_GetMax returns the maximum representable floating point value, and PyFloat_GetMin returns the minimum positive va_<<0:>>_
++++++++ PARAGRAPH ++++++++
lue_<<1:>>_PyFloat_GetInfo returns an object containing more information from the float.h file, such as "mant_dig" (number of digits in the mantissa), "epsilon" (smallest difference between 1.0 and the next largest value representable), and several others_<<2:>>_(Contributed by Christian Heimes; issue 1534.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      C functions and methods that use PyComplex_AsCComplex will now accept arguments that have a __complex__() method_<<1:>>_In particular, the functions in the cmath module will now accept objects with this method_<<2:>>_This is a backport of a Python 3.0 change_<<3:>>_(Contributed by Mark Dickinson; issue 1675423.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Pythonâs C API now includes two functions for case-insensitive string comparisons, PyOS_stricmp(char*, char*) and PyOS_strnicmp(char*, char*, Py_ssize_t)_<<1:>>_(Contributed by Christian Heimes; issue 1635.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Many C extensions define their own little macro for adding integers and strings to the moduleâs dictionary in the init* function_<<1:>>_Python 2.6 finally defines standard macros for adding values to a module, PyModule_AddStringMacro and PyModule_AddIntMacro()_<<2:>>_(Contributed by Christian Heimes.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Some macros were renamed in both 3.0 and 2.6 to make it clearer that they are macros, not functions_<<1:>>_Py_Size() became Py_SIZE(), Py_Type() became Py_TYPE(), and Py_Refcnt() became Py_REFCNT()_<<2:>>_The mixed-case macros are still available in Python 2.6 for backward compatibility_<<3:>>_(issue 1629)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Distutils now places C extensions it builds in a different directory when running on a debug version of Python_<<1:>>_(Contributed by Collin Winter; issue 1530959.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Several basic data types, such as integers and strings, maintain internal free lists of objects that can be re-used_<<1:>>_The data structures for these free lists now follow a naming convention: the variable is always named free_list, the counter is always named numfree, and a macro Py<typename>_MAXFREELIST is always defined_<<2:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      A new Makefile target, âmake patchcheckâ, prepares the Python source tree for making a patch: it fixes trailing whitespace in all modified .py files, checks whether the documentation has been changed, and reports whether the Misc/ACKS and Misc/NEWS files have been updated_<<1:>>_(Contributed by Brett Cannon.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Another new target, âmake profile-optâ, compiles a Python binary using GCCâs profile-guided optimization_<<1:>>_It compiles Python with profiling enabled, runs the test suite to obtain a set of profiling results, and then compiles using these results for optimization_<<2:>>_(Contributed by Gregory P_<<3:>>_Smith.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
Port-Specific Changes: WindowsÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The support for Windows 95, 98, ME and NT4 has been dropped_<<1:>>_Python 2.6 requires at least Windows 2000 SP4_<<2:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The new default compiler on Windows is Visual Studio 2008 (version 9.0)_<<1:>>_The build directories for Visual Studio 2003 (version 7.1) and 2005 (version 8.0) were moved into the PC/ directory_<<2:>>_The new PCbuild directory supports cross compilation for X64, debug builds and Profile Guided Optimization (PGO)_<<3:>>_PGO builds are roughly 10% faster than normal builds_<<4:>>_(Contributed by Christian Heimes with help from Amaury Forgeot dâArc and Martin von Loewis.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The msvcrt module now supports both the normal and wide char variants of the console I/O API_<<1:>>_The getwch() function reads a keypress and returns a Unicode value, as does the getwche() function_<<2:>>_The putwch() function takes a Unicode character and writes it to the console_<<3:>>_(Contributed by Christian Heimes.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      os.path.expandvars() will now expand environment variables in the form â%var%â, and â~userâ will be expanded into the userâs home directory path_<<1:>>_(Contributed by Josiah Carlson; issue 957650.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The socket moduleâs socket objects now have an ioctl() method that provides a limited interface to the WSAIoctl system interface_<<1:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The _winreg module now has a function, ExpandEnvironmentStrings(), that expands environment variable references such as %NAME% in an input string_<<1:>>_The handle objects provided by this module now support the context protocol, so they can be used in with statements_<<2:>>_(Contributed by Christian Heimes.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
      _winreg also has better support for x64 systems, exposing the DisableReflectionKey(), EnableReflectionKey(), and QueryReflectionKey() functions, which enable and disable registry reflection for 32-bit processes running on 64-bit systems_<<1:>>_(issue 1753245)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The msilib moduleâs Record object gained GetInteger() and GetString() methods that return field values as an integer or a string_<<1:>>_(Contributed by Floris Bruynooghe; issue 2125.)_<<0:>>_
++++++++ PARAGRAPH ++++++++
Port-Specific Changes: Mac OS XÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
    * When compiling a framework build of Python, you can now specify the framework name to be used by providing the --with-framework-name= option to the configure script_<<1:>>_    * The macfs module has been removed_<<2:>>_This in turn required the macostools.touched() function to be removed because it depended on the macfs module_<<3:>>_(issue 1490190)
    * Many other Mac OS modules have been deprecated and will removed in Python 3.0: _builtinSuites, aepack, aetools, aetypes, applesingle, appletrawmain, appletrunner, argvemulator, Audio_mac, autoGIL, Carbon, cfmfile, CodeWarrior, ColorPicker, EasyDialogs, Explorer, Finder, FrameWork, findertools, ic, icglue, icopen, macerrors, MacOS, macfs, macostools, macresource, MiniAEFrame, Nav, Netscape, OSATerminology, pimp, PixMapWrapper, StdSuites, SystemEvents, Terminal, and terminalcommand._<<0:>>_
++++++++ PARAGRAPH ++++++++
Port-Specific Changes: IRIXÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
A number of old IRIX-specific modules were deprecated and will be removed in Python 3.0: al and AL, cd, cddb, cdplayer, CL and cl, DEVICE, ERRNO, FILE, FL and fl, flp, fm, GET, GLWS, GL and gl, IN, IOCTL, jpeg, panelparser, readcd, SV and sv, torgb, videoreader, and WAIT_<<1:>>_Porting to Python 2.6Â¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
This section lists previously described changes and other bugfixes that may require changes to your code:_<<0:>>_
++++++++ PARAGRAPH ++++++++
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Classes that arenât supposed to be hashable should set __hash__ = None in their definitions to indicate the fact_<<1:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      String exceptions have been removed_<<1:>>_Attempting to use them raises a TypeError_<<2:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The __init__() method of collections.deque now clears any existing contents of the deque before adding elements from the iterable_<<1:>>_This change makes the behavior match list.__init__()_<<2:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      object.__init__() previously accepted arbitrary arguments and keyword arguments, ignoring them_<<1:>>_In Python 2.6, this is no longer allowed and will result in a TypeError_<<2:>>_This will affect __init__() methods that end up calling the corresponding method on object (perhaps through using super())_<<3:>>_See issue 1683368 for discussion_<<4:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The Decimal constructor now accepts leading and trailing whitespace when passed a string_<<1:>>_Previously it would raise an InvalidOperation exception_<<2:>>_On the other hand, the create_decimal() method of Context objects now explicitly disallows extra whitespace, raising a ConversionSyntax exception_<<3:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      Due to an implementation accident, if you passed a file path to the built-in __import__() function, it would actually import the specified file_<<1:>>_This was never intended to work, however, and the implementation now explicitly checks for this case and raises an ImportError_<<2:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      C API: the PyImport_Import and PyImport_ImportModule functions now default to absolute imports, not relative imports_<<1:>>_This will affect C extensions that import other modules_<<2:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      C API: extension data types that shouldnât be hashable should define their tp_hash slot to PyObject_HashNotImplemented_<<1:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The socket module exception socket.error now inherits from IOError_<<1:>>_Previously it wasnât a subclass of StandardError but now it is, through IOError_<<2:>>_(Implemented by Gregory P_<<3:>>_Smith; issue 1706815.)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      The xmlrpclib module no longer automatically converts datetime.date and datetime.time to the xmlrpclib.DateTime type; the conversion semantics were not necessarily correct for all applications_<<1:>>_Code using xmlrpclib should convert date and time instances_<<2:>>_(issue 1330538)
    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      (3.0-warning mode) The Exception class now warns when acc_<<0:>>_
++++++++ PARAGRAPH ++++++++
essed using slicing or index access; having Exception behave like a tuple is being phased out_<<1:>>_    *_<<0:>>_
++++++++ PARAGRAPH ++++++++
      (3.0-warning mode) inequality comparisons between two dictionaries or two objects that donât implement comparison methods are reported as warnings_<<1:>>_dict1 == dict2 still works, but dict1 < dict2 is being phased out._<<0:>>_
++++++++ PARAGRAPH ++++++++
      Comparisons between cells, which are an implementation detail of Pythonâs scoping rules, also cause warnings because such comparisons are forbidden entirely in 3.0._<<0:>>_
++++++++ PARAGRAPH ++++++++
AcknowledgementsÂ¶_<<0:>>_
++++++++ PARAGRAPH ++++++++
The author would like to thank the following people for offering suggestions, corrections and assistance with various drafts of this article: Georg Brandl, Steve Brown, Nick Coghlan, Ralph Corderoy, Jim Jewett, Kent Johnson, Chris Lambacher, Martin Michlmayr, Antoine Pitrou, Brian Warner_<<1:>>_Table Of Contents_<<0:>>_
++++++++ PARAGRAPH ++++++++
    * Whatâs New in Python 2.6
          o Python 3.0
          o Changes to the Development Process
                + New Issue Tracker: Roundup
                + New Documentation Format: reStructuredText Using Sphinx
          o PEP 343: The âwithâ statement
                + Writing Context Managers
                + The contextlib module
          o PEP 366: Explicit Relative Imports From a Main Module
          o PEP 370: Per-user site-packages Directory
          o PEP 371: The multiprocessing Package
          o PEP 3101: Advanced String Formatting
          o PEP 3105: print As a Function
          o PEP 3110: Exception-Handling Changes
          o PEP 3112: Byte Literals
          o PEP 3116: New I/O Library
          o PEP 3118: Revised Buffer Protocol
          o PEP 3119: Abstract Base Classes
          o PEP 3127: Integer Literal Support and Syntax
          o PEP 3129: Class Decorators
          o PEP 3141: A Type Hierarchy for Numbers
                + The fractions Module
          o Other Language Changes
                + Optimizations
                + Interpreter Changes
          o New, Improved, and Deprecated Modules
                + The ast module
                + The future_builtins module
                + The json module: JavaScript Object Notation
                + The plistlib module: A Property-List Parser
                + ctypes Enhancements
                + Improved SSL Support
          o Build and C API Changes
                + Port-Specific Changes: Windows
                + Port-Specific Changes: Mac OS X
                + Port-Specific Changes: IRIX
          o Porting to Python 2.6
          o Acknowledgements_<<0:>>_
++++++++ PARAGRAPH ++++++++
Previous topic_<<0:>>_
++++++++ PARAGRAPH ++++++++
Whatâs New in Python
Next topic_<<0:>>_
++++++++ PARAGRAPH ++++++++
Whatâs New in Python 2.5
This Page_<<0:>>_
++++++++ PARAGRAPH ++++++++
    * Show Source_<<0:>>_
++++++++ PARAGRAPH ++++++++
Quick search_<<0:>>_
++++++++ PARAGRAPH ++++++++
Enter search terms or a module, class or function name_<<1:>>_Navigation_<<0:>>_
++++++++ PARAGRAPH ++++++++
    * index
    * modules |
    * next |
    * previous |
    *
    * Python v2.6.2 documentation Â»
    * Whatâs New in Python Â»_<<0:>>_
++++++++ PARAGRAPH ++++++++
Â© Copyright 1990-2009, Python Software Foundation_<<1:>>_Last updated on Jun 09, 2009_<<2:>>_Created using Sphinx 0.6.1_<<3:>>_Created using Sphinx 0.6.1.
